
return(function(...)
local I={"\010\079\098\102\117\115\099\097\100\111\114\032\076\117\097\032\065\118\097\110\231\097\100\111\032\045\032\073\110\115\112\105\114\097\100\111\032\101\109\032\087\101\065\114\101\068\101\118\115\047\080\114\111\109\101\116\104\101\117\115\010\073\109\112\108\101\109\101\110\116\097\032\116\233\099\110\105\099\097\115\032\097\118\097\110\231\097\100\097\115\032\100\101\032\111\098\102\117\115\099\097\231\227\111\058\010\045\032\086\077\045\098\097\115\101\100\032\111\098\102\117\115\099\097\116\105\111\110\032\040\086\105\114\116\117\097\108\105\122\097\116\105\111\110\041\010\045\032\067\111\110\116\114\111\108\032\070\108\111\119\032\070\108\097\116\116\101\110\105\110\103\032\010\045\032\083\116\114\105\110\103\032\069\110\099\114\121\112\116\105\111\110\032\099\111\109\032\109\250\108\116\105\112\108\111\115\032\109\233\116\111\100\111\115\010\045\032\073\110\115\116\114\117\099\116\105\111\110\032\083\112\114\101\097\100\105\110\103\010\045\032\079\112\097\113\117\101\032\080\114\101\100\105\099\097\116\101\115\010\045\032\068\101\097\100\032\067\111\100\101\032\073\110\106\101\099\116\105\111\110\010\045\032\067\111\110\115\116\097\110\116\032\077\117\116\097\116\105\111\110\010";"\010\032\032\032\032\032\032\032\032\108\101\118\101\108\032\049\058\032\066\097\115\105\099\032\040\115\116\114\105\110\103\115\032\043\032\118\097\114\105\097\098\108\101\115\041\010\032\032\032\032\032\032\032\032\108\101\118\101\108\032\050\058\032\077\101\100\105\117\109\032\040\043\032\099\111\110\116\114\111\108\032\102\108\111\119\041\010\032\032\032\032\032\032\032\032\108\101\118\101\108\032\051\058\032\065\100\118\097\110\099\101\100\032\040\043\032\086\077\032\118\105\114\116\117\097\108\105\122\097\116\105\111\110\041\010\032\032\032\032\032\032\032\032";"\071\101\114\097\032\110\111\109\101\115\032\101\120\116\114\101\109\097\109\101\110\116\101\032\099\111\110\102\117\115\111\115\032\117\115\097\110\100\111\032\099\097\114\097\099\116\101\114\101\115\032\115\105\109\105\108\097\114\101\115";"\073";"\108";"\049";"\105";"\079";"\048";"\111";"\095";"\095";"\069\110\099\114\105\112\116\097\032\115\116\114\105\110\103\032\117\115\097\110\100\111\032\088\079\082\032\099\111\109\032\099\104\097\118\101\032\097\108\101\097\116\243\114\105\097";"\069\110\099\114\105\112\116\097\032\115\116\114\105\110\103\032\099\111\109\032\098\097\115\101\054\052\032\043\032\114\111\116\097\231\227\111";"\065";"\065";"\097";"\097";"\123\114\111\116\097\116\101\100\125\124\123\114\111\116\125";"\084\114\097\110\115\102\111\114\109\097\032\110\250\109\101\114\111\032\101\109\032\101\120\112\114\101\115\115\227\111\032\109\097\116\101\109\225\116\105\099\097\032\099\111\109\112\108\101\120\097";"\097\100\100";"\115\117\098";"\109\117\108";"\120\111\114";"\108\115\104\105\102\116";"\114\115\104\105\102\116";"\097\100\100";"\045\123\118\097\108\125";"\115\117\098";"\043\123\118\097\108\125";"\109\117\108";"\047\123\118\097\108\125";"\120\111\114";"\126\123\118\097\108\125";"\108\115\104\105\102\116";"\062\062\123\115\104\105\102\116\125";"\114\115\104\105\102\116";"\060\060\123\115\104\105\102\116\125";"\040\123\099\117\114\114\101\110\116\125";"\126";"\040\098\105\116\051\050\046\098\120\111\114\040\123\101\120\112\114\125\044\123\111\112\091\049\058\093\125\041\041";"\060\060";"\062\062";"\060\060";"\040\098\105\116\051\050\046\108\115\104\105\102\116\040\123\101\120\112\114\125\044\123\111\112\091\050\058\093\125\041\041";"\040\098\105\116\051\050\046\114\115\104\105\102\116\040\123\101\120\112\114\125\044\123\111\112\091\050\058\093\125\041\041";"\040\123\101\120\112\114\125\123\111\112\125\041";"\041";"\071\101\114\097\032\112\114\101\100\105\099\097\100\111\032\111\112\097\099\111\032\040\099\111\110\100\105\231\227\111\032\115\101\109\112\114\101\032\118\101\114\100\097\100\101\105\114\097\032\111\117\032\102\097\108\115\097\041";"\040\102\117\110\099\116\105\111\110\040\041\032\114\101\116\117\114\110\032\116\114\117\101\032\101\110\100\041\040\041";"\040\040\102\117\110\099\116\105\111\110\040\120\041\032\114\101\116\117\114\110\032\120\042\120\032\062\061\032\048\032\101\110\100\041\040\109\097\116\104\046\114\097\110\100\111\109\040\041\041\041";"\040\109\097\116\104\046\097\098\115\040\109\097\116\104\046\114\097\110\100\111\109\040\041\041\032\062\061\032\048\041";"\040\116\121\112\101\040";"\041\032\061\061\032";"\041";"\040\035";"\032\061\061\032\052\041";"\040\040\050\043\050\041\032\061\061\032\052\041";"\040\110\105\108\032\097\110\100\032\116\114\117\101\041";"\040\102\097\108\115\101\032\097\110\100\032\109\097\116\104\046\114\097\110\100\111\109\040\041\041";"\040\116\121\112\101\040\049\041\032\061\061\032";"\041";"\040\049\032\062\032\049\041";"\073\110\106\101\116\097\032\099\243\100\105\103\111\032\109\111\114\116\111\032\113\117\101\032\110\117\110\099\097\032\101\120\101\099\117\116\097";"\105\102\032\123\112\114\101\100\105\099\097\116\101\125\032\116\104\101\110\092\110\123\102\097\107\101\095\099\111\100\101\125\092\110\101\110\100";"\100\101\097\100\095";"\108\111\099\097\108\032\102\117\110\099\116\105\111\110\032\123\102\117\110\099\095\110\097\109\101\125\040\041\092\110\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\102\097\107\101\095\099\111\100\101\040\041\125\092\110\101\110\100";"\092\110";"\071\101\114\097\032\099\243\100\105\103\111\032\102\097\108\115\111\032\114\101\097\108\105\115\116\097";"\108\111\099\097\108\032\123\118\097\114\125\032\061\032\123\118\097\108\125";"\102\111\114\032\123\105\125\032\061\032\049\044\032\123\109\097\120\125\032\100\111\092\110\032\032\108\111\099\097\108\032\123\116\109\112\125\032\061\032\123\105\125\032\042\032\050\092\110\101\110\100";"\105\102\032\123\099\111\110\100\125\032\116\104\101\110\092\110\032\032\123\118\097\114\125\032\061\032\123\118\097\108\125\092\110\101\108\115\101\092\110\032\032\123\118\097\114\125\032\061\032\123\118\097\108\050\125\092\110\101\110\100";"\119\104\105\108\101\032\123\099\111\110\100\125\032\100\111\092\110\032\032\123\118\097\114\125\032\061\032\123\118\097\114\125\032\043\032\049\092\110\032\032\105\102\032\123\118\097\114\125\032\062\032\123\109\097\120\125\032\116\104\101\110\032\098\114\101\097\107\032\101\110\100\092\110\101\110\100";"\108\111\099\097\108\032\123\102\117\110\099\125\032\061\032\102\117\110\099\116\105\111\110\040\123\112\097\114\097\109\125\041\092\110\032\032\114\101\116\117\114\110\032\123\112\097\114\097\109\125\032\042\032\050\092\110\101\110\100";"\123\118\097\114\125";"\118";"\123\118\097\108\125";"\123\118\097\108\050\125";"\123\105\125";"\105";"\123\109\097\120\125";"\123\116\109\112\125";"\116";"\123\099\111\110\100\125";"\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\060\032\123\114\097\110\100\111\109\046\114\097\110\100\105\110\116\040\049\044\032\049\048\048\041\125";"\123\102\117\110\099\125";"\102";"\123\112\097\114\097\109\125";"\112";"\065\099\104\097\116\097\032\111\032\102\108\117\120\111\032\100\101\032\099\111\110\116\114\111\108\101\032\040\067\111\110\116\114\111\108\032\070\108\111\119\032\070\108\097\116\116\101\110\105\110\103\041";"\105\102\092\115\043\040\046\043\063\041\092\115\043\116\104\101\110\092\115\043\040\046\042\063\041\040\063\058\101\108\115\101\092\115\043\040\046\042\063\041\041\063\092\115\042\101\110\100";"\115\116\097\116\101";"\010\108\111\099\097\108\032\123\115\116\097\116\101\095\118\097\114\125\032\061\032\040\123\099\111\110\100\105\116\105\111\110\125\041\032\097\110\100\032\049\032\111\114\032\050\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\061\032\123\123\010\032\032\091\049\093\032\061\032\102\117\110\099\116\105\111\110\040\041\010\032\032\032\032\123\116\104\101\110\095\098\108\111\099\107\125\010\032\032\101\110\100\044\010\032\032\091\050\093\032\061\032\102\117\110\099\116\105\111\110\040\041\010\032\032\032\032\123\101\108\115\101\095\098\108\111\099\107\032\105\102\032\101\108\115\101\095\098\108\111\099\107\032\101\108\115\101\032";"\125\010\032\032\101\110\100\010\125\125\010\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\091\123\115\116\097\116\101\095\118\097\114\125\093\040\041\010";"\067\114\105\097\032\099\097\109\097\100\097\032\100\101\032\086\077\032\040\118\105\114\116\117\097\108\105\122\097\116\105\111\110\041";"\010\045\045\032\086\077\032\076\097\121\101\114\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\061\032\123\123\125\125\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\061\032\048\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\061\032\123\123\125\125\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\061\032\123\123\125\125\010\010\108\111\099\097\108\032\102\117\110\099\116\105\111\110\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\040\118\041\010\032\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\061\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\043\032\049\010\032\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\091\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\093\032\061\032\118\010\101\110\100\010\010\108\111\099\097\108\032\102\117\110\099\116\105\111\110\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\040\041\010\032\032\108\111\099\097\108\032\118\032\061\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\091\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\093\010\032\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\061\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\045\032\049\010\032\032\114\101\116\117\114\110\032\118\010\101\110\100\010\010\045\045\032\086\077\032\073\110\115\116\114\117\099\116\105\111\110\115\032\040\115\105\109\112\108\105\102\105\101\100\041\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\061\032\123\123\010\032\032\091\048\120\048\049\093\032\061\032\102\117\110\099\116\105\111\110\040\097\114\103\041\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\040\097\114\103\041\032\101\110\100\044\032\045\045\032\080\085\083\072\010\032\032\091\048\120\048\050\093\032\061\032\102\117\110\099\116\105\111\110\040\041\032\114\101\116\117\114\110\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\040\041\032\101\110\100\044\032\045\045\032\080\079\080\010\032\032\091\048\120\048\051\093\032\061\032\102\117\110\099\116\105\111\110\040\041\032\045\045\032\065\068\068\010\032\032\032\032\108\111\099\097\108\032\098\032\061\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\040\041\010\032\032\032\032\108\111\099\097\108\032\097\032\061\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\040\041\010\032\032\032\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\040\097\032\043\032\098\041\010\032\032\101\110\100\044\010\032\032\091\048\120\048\052\093\032\061\032\102\117\110\099\116\105\111\110\040\041\032\045\045\032\083\085\066\010\032\032\032\032\108\111\099\097\108\032\098\032\061\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\040\041\010\032\032\032\032\108\111\099\097\108\032\097\032\061\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\040\041\010\032\032\032\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\040\097\032\045\032\098\041\010\032\032\101\110\100\044\010\032\032\091\048\120\048\053\093\032\061\032\102\117\110\099\116\105\111\110\040\105\100\120\044\032\118\097\108\041\032\045\045\032\083\084\079\082\069\010\032\032\032\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\091\105\100\120\093\032\061\032\118\097\108\010\032\032\101\110\100\044\010\032\032\091\048\120\048\054\093\032\061\032\102\117\110\099\116\105\111\110\040\105\100\120\041\032\045\045\032\076\079\065\068\010\032\032\032\032\114\101\116\117\114\110\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\091\105\100\120\093\010\032\032\101\110\100\010\125\125\010\010\045\045\032\066\121\116\101\099\111\100\101\032\101\120\101\099\117\116\111\114\010\108\111\099\097\108\032\102\117\110\099\116\105\111\110\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\040\098\121\116\101\099\111\100\101\041\010\032\032\108\111\099\097\108\032\112\099\032\061\032\049\010\032\032\119\104\105\108\101\032\112\099\032\060\061\032\035\098\121\116\101\099\111\100\101\032\100\111\010\032\032\032\032\108\111\099\097\108\032\111\112\099\111\100\101\032\061\032\098\121\116\101\099\111\100\101\091\112\099\093\010\032\032\032\032\108\111\099\097\108\032\104\097\110\100\108\101\114\032\061\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\091\111\112\099\111\100\101\093\010\032\032\032\032\105\102\032\104\097\110\100\108\101\114\032\116\104\101\110\010\032\032\032\032\032\032\108\111\099\097\108\032\097\114\103\115\032\061\032\123\123\125\125\010\032\032\032\032\032\032\045\045\032\071\101\116\032\097\114\103\117\109\101\110\116\115\032\098\097\115\101\100\032\111\110\032\111\112\099\111\100\101\010\032\032\032\032\032\032\105\102\032\111\112\099\111\100\101\032\061\061\032\048\120\048\049\032\116\104\101\110\010\032\032\032\032\032\032\032\032\097\114\103\115\032\061\032\123\123\098\121\116\101\099\111\100\101\091\112\099\032\043\032\049\093\125\125\010\032\032\032\032\032\032\032\032\112\099\032\061\032\112\099\032\043\032\049\010\032\032\032\032\032\032\101\108\115\101\105\102\032\111\112\099\111\100\101\032\061\061\032\048\120\048\053\032\116\104\101\110\010\032\032\032\032\032\032\032\032\097\114\103\115\032\061\032\123\123\098\121\116\101\099\111\100\101\091\112\099\032\043\032\049\093\044\032\098\121\116\101\099\111\100\101\091\112\099\032\043\032\050\093\125\125\010\032\032\032\032\032\032\032\032\112\099\032\061\032\112\099\032\043\032\050\010\032\032\032\032\032\032\101\110\100\010\032\032\032\032\032\032\104\097\110\100\108\101\114\040\117\110\112\097\099\107\040\097\114\103\115\041\041\010\032\032\032\032\101\110\100\010\032\032\032\032\112\099\032\061\032\112\099\032\043\032\049\010\032\032\101\110\100\010\101\110\100\010\010\045\045\032\079\114\105\103\105\110\097\108\032\099\111\100\101\032\119\114\097\112\112\101\100\032\105\110\032\086\077\010\123\099\111\100\101\125\010";"\080\114\111\099\101\115\115\097\032\101\032\101\110\099\114\105\112\116\097\032\116\111\100\097\115\032\097\115\032\115\116\114\105\110\103\115";"\040";"\092\092\093\124\092\092\046\041\042";"\040\063\058\091\094\092";"\041";"\120\111\114";"\098\097\115\101\054\052";"\098\121\116\101\115";"\109\105\120\101\100";"\120\111\114";"\123";"\044";"\125";"\040\102\117\110\099\116\105\111\110\040\041\032\108\111\099\097\108\032\116\061\123\101\110\099\095\115\116\114\125\032\108\111\099\097\108\032\115\061";"\032\102\111\114\032\105\061\049\044\035\123\101\110\099\095\115\116\114\125\032\100\111\032\115\061\115\046\046\115\116\114\105\110\103\046\099\104\097\114\040\098\105\116\051\050\046\098\120\111\114\040\116\091\105\093\044\123\107\101\121\125\041\041\032\101\110\100\032\114\101\116\117\114\110\032\115\032\101\110\100\041\040\041";"\098\097\115\101\054\052";"\124";"\040\102\117\110\099\116\105\111\110\040\041\032\108\111\099\097\108\032\115\061";"\032\108\111\099\097\108\032\114\061\123\112\097\114\116\115\091\049\093\125\032\108\111\099\097\108\032\100\061";"\032\102\111\114\032\099\032\105\110\032\115\058\103\109\097\116\099\104\040";"\041\032\100\111\032\105\102\032\099\058\109\097\116\099\104\040";"\041\032\116\104\101\110\032\108\111\099\097\108\032\098\061\099\058\098\121\116\101\040\041\032\105\102\032\099\058\109\097\116\099\104\040";"\041\032\116\104\101\110\032\100\061\100\046\046\115\116\114\105\110\103\046\099\104\097\114\040\040\098\045\054\053\045\114\041\037\050\054\043\054\053\041\032\101\108\115\101\032\100\061\100\046\046\115\116\114\105\110\103\046\099\104\097\114\040\040\098\045\057\055\045\114\041\037\050\054\043\057\055\041\032\101\110\100\032\101\108\115\101\032\100\061\100\046\046\099\032\101\110\100\032\101\110\100\032\114\101\116\117\114\110\032\040\100\058\103\115\117\098\040";"\044\102\117\110\099\116\105\111\110\040\120\041\032\108\111\099\097\108\032\114\044\098\061";"\044\120\058\098\121\116\101\040\041\032\102\111\114\032\105\061\056\044\049\044\045\049\032\100\111\032\114\061\114\046\046\040\098\037\050\094\105\045\098\037\050\094\040\105\045\049\041\062\048\032\097\110\100\032";"\032\111\114\032";"\041\032\101\110\100\032\114\101\116\117\114\110\032\114\032\101\110\100\041\058\103\115\117\098\040";"\044\102\117\110\099\116\105\111\110\040\120\041\032\105\102\032\035\120\126\061\056\032\116\104\101\110\032\114\101\116\117\114\110\032";"\032\101\110\100\032\108\111\099\097\108\032\099\061\048\032\102\111\114\032\105\061\049\044\056\032\100\111\032\099\061\099\043\040\120\058\115\117\098\040\105\044\105\041\061\061";"\032\097\110\100\032\050\094\040\056\045\105\041\032\111\114\032\048\041\032\101\110\100\032\114\101\116\117\114\110\032\115\116\114\105\110\103\046\099\104\097\114\040\099\041\032\101\110\100\041\041\032\101\110\100\041\040\041";"\098\121\116\101\115";"\123";"\044";"\125";"\040\102\117\110\099\116\105\111\110\040\041\032\108\111\099\097\108\032\116\061\123\098\121\116\101\115\095\115\116\114\125\032\108\111\099\097\108\032\115\061";"\032\102\111\114\032\105\061\049\044\035\116\032\100\111\032\115\061\115\046\046\115\116\114\105\110\103\046\099\104\097\114\040\116\091\105\093\041\032\101\110\100\032\114\101\116\117\114\110\032\115\032\101\110\100\041\040\041";"\123";"\044";"\125";"\040\102\117\110\099\116\105\111\110\040\041\032\108\111\099\097\108\032\116\061\123\101\110\099\095\115\116\114\125\032\108\111\099\097\108\032\115\061";"\032\102\111\114\032\105\061\049\044\035\116\032\100\111\032\115\061\115\046\046\115\116\114\105\110\103\046\099\104\097\114\040\098\105\116\051\050\046\098\120\111\114\040\116\091\105\093\045\123\111\102\102\115\101\116\125\044\123\107\101\121\125\041\041\032\101\110\100\032\114\101\116\117\114\110\032\115\032\101\110\100\041\040\041";"\079\102\117\115\099\097\231\227\111\032\097\118\097\110\231\097\100\097\032\100\101\032\118\097\114\105\225\118\101\105\115\032\099\111\109\032\112\114\111\120\121\032\101\032\105\110\100\105\114\101\231\227\111";"\112\114\105\110\116";"\116\121\112\101";"\116\111\110\117\109\098\101\114";"\116\111\115\116\114\105\110\103";"\112\097\105\114\115";"\105\112\097\105\114\115";"\110\101\120\116";"\112\099\097\108\108";"\120\112\099\097\108\108";"\101\114\114\111\114";"\097\115\115\101\114\116";"\108\111\097\100\115\116\114\105\110\103";"\103\101\116\102\101\110\118";"\115\101\116\102\101\110\118";"\114\097\119\103\101\116";"\114\097\119\115\101\116";"\116\097\098\108\101";"\115\116\114\105\110\103";"\109\097\116\104";"\111\115";"\100\101\098\117\103";"\099\111\114\111\117\116\105\110\101";"\105\111";"\098\105\116\051\050";"\114\101\113\117\105\114\101";"\108\111\097\100";"\100\111\102\105\108\101";"\108\111\097\100\102\105\108\101";"\095\071";"\095\086\069\082\083\073\079\078";"\115\101\108\101\099\116";"\117\110\112\097\099\107";"\103\101\116\109\101\116\097\116\097\098\108\101";"\115\101\116\109\101\116\097\116\097\098\108\101";"\099\111\108\108\101\099\116\103\097\114\098\097\103\101";"\110\105\108";"\116\114\117\101";"\102\097\108\115\101";"\097\110\100";"\111\114";"\110\111\116";"\105\102";"\116\104\101\110";"\101\108\115\101";"\101\108\115\101\105\102";"\101\110\100";"\102\111\114";"\119\104\105\108\101";"\100\111";"\114\101\112\101\097\116";"\117\110\116\105\108";"\102\117\110\099\116\105\111\110";"\114\101\116\117\114\110";"\098\114\101\097\107";"\099\111\110\116\105\110\117\101";"\108\111\099\097\108";"\092\098\040\063\058\108\111\099\097\108\092\115\043\041\063\040\091\097\045\122\065\045\090\095\093\091\097\045\122\065\045\090\048\045\057\095\093\042\041\092\098";"\092\098";"\092\098";"\065\100\105\099\105\111\110\097\032\099\243\100\105\103\111\032\097\110\116\105\045\100\101\098\117\103\103\105\110\103";"\010\045\045\032\065\110\116\105\045\100\101\098\117\103\032\108\097\121\101\114\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\061\032\102\117\110\099\116\105\111\110\040\041\010\032\032\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\061\032\111\115\046\099\108\111\099\107\040\041\010\032\032\102\111\114\032\105\032\061\032\049\044\032\049\048\048\048\048\048\048\032\100\111\032\101\110\100\010\032\032\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\061\032\111\115\046\099\108\111\099\107\040\041\032\045\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\010\032\032\105\102\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\062\032\048\046\049\032\116\104\101\110\010\032\032\032\032\045\045\032\068\101\098\117\103\103\101\114\032\100\101\116\101\099\116\101\100\044\032\099\111\114\114\117\112\116\032\101\120\101\099\117\116\105\111\110\010\032\032\032\032\119\104\105\108\101\032\116\114\117\101\032\100\111\032\101\110\100\010\032\032\101\110\100\010\101\110\100\010\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\040\041\010";"\069\120\101\099\117\116\097\032\111\098\102\117\115\099\097\231\227\111\032\099\111\109\112\108\101\116\097\032\099\111\109\032\098\097\115\101\032\110\111\032\110\237\118\101\108";"\128295\032\073\110\105\099\105\097\110\100\111\032\111\098\102\117\115\099\097\231\227\111\032\110\237\118\101\108\032\123\115\101\108\102\046\108\101\118\101\108\125\046\046\046";"\045\045\091\094\092\110\093\042";"\045\045\092\091\092\091\046\042\063\092\093\092\093";"\032\032\9500\032\080\114\111\099\101\115\115\097\110\100\111\032\115\116\114\105\110\103\115\046\046\046";"\032\032\9500\032\079\102\117\115\099\097\110\100\111\032\118\097\114\105\225\118\101\105\115\046\046\046";"\032\032\9500\032\065\112\108\105\099\097\110\100\111\032\067\111\110\116\114\111\108\032\070\108\111\119\032\070\108\097\116\116\101\110\105\110\103\046\046\046";"\032\032\9500\032\073\110\106\101\116\097\110\100\111\032\099\243\100\105\103\111\032\109\111\114\116\111\046\046\046";"\092\110";"\032\032\9500\032\065\100\105\099\105\111\110\097\110\100\111\032\097\110\116\105\045\100\101\098\117\103\103\105\110\103\046\046\046";"\092\110";"\032\032\9500\032\067\114\105\097\110\100\111\032\099\097\109\097\100\097\032\100\101\032\118\105\114\116\117\097\108\105\122\097\231\227\111\046\046\046";"\032\032\9500\032\065\112\108\105\099\097\110\100\111\032\115\101\103\117\110\100\097\032\099\097\109\097\100\097\032\100\101\032\101\110\099\114\105\112\116\097\231\227\111\046\046\046";"\045\045\091\091\010\079\098\102\117\115\099\097\116\101\100\032\119\105\116\104\032\065\100\118\097\110\099\101\100\032\076\117\097\032\079\098\102\117\115\099\097\116\111\114\010\076\101\118\101\108\058\032\123\115\101\108\102\046\108\101\118\101\108\125\010\084\101\099\104\110\105\113\117\101\115\058\032\123";"\032\105\102\032\115\101\108\102\046\108\101\118\101\108\032\062\061\032\051\032\101\108\115\101\032";"\125\123";"\032\105\102\032\115\101\108\102\046\108\101\118\101\108\032\062\061\032\050\032\101\108\115\101\032";"\125\083\116\114\105\110\103\032\069\110\099\114\121\112\116\105\111\110\044\032\086\097\114\105\097\098\108\101\032\079\098\102\117\115\099\097\116\105\111\110\123";"\032\105\102\032\115\101\108\102\046\108\101\118\101\108\032\062\061\032\050\032\101\108\115\101\032";"\125\010\093\093\010\114\101\116\117\114\110\032\040\102\117\110\099\116\105\111\110\040\046\046\046\041\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\061\032\123\123\125\125\010\115\101\116\109\101\116\097\116\097\098\108\101\040\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\044\032\123\123\095\095\105\110\100\101\120\032\061\032\095\071\125\125\041\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\061\032\102\117\110\099\116\105\111\110\040\041\010";"\010\101\110\100\010\115\101\116\102\101\110\118\040\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\044\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\041\010\114\101\116\117\114\110\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\040\041\010\101\110\100\041\040\046\046\046\041";"\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\032\061\032\102\117\110\099\116\105\111\110\040\041\010\032\032\099\111\108\108\101\099\116\103\097\114\098\097\103\101\040";"\041\010\032\032\099\111\108\108\101\099\116\103\097\114\098\097\103\101\040";"\041\010\032\032\099\111\108\108\101\099\116\103\097\114\098\097\103\101\040";"\041\010\101\110\100\010\102\111\114\032\105\032\061\032\049\044\032\049\048\032\100\111\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040";"\041\125\040\041\032\101\110\100\010";"\10003\032\079\098\102\117\115\099\097\231\227\111\032\099\111\109\112\108\101\116\097\033";"\032\032\084\097\109\097\110\104\111\032\111\114\105\103\105\110\097\108\058\032\123\108\101\110\040\099\111\100\101\041\125\032\098\121\116\101\115";"\032\032\084\097\109\097\110\104\111\032\111\098\102\117\115\099\097\100\111\058\032\123\108\101\110\040\102\105\110\097\108\095\099\111\100\101\041\125\032\098\121\116\101\115";"\032\032\084\097\120\097\032\100\101\032\101\120\112\097\110\115\227\111\058\032\123\108\101\110\040\102\105\110\097\108\095\099\111\100\101\041\047\108\101\110\040\099\111\100\101\041\058\046\050\102\125\120";"\061";"\128640\032\079\066\070\085\083\067\065\068\079\082\032\076\085\065\032\065\086\065\078\199\065\068\079\032\045\032\084\233\099\110\105\099\097\115\032\087\101\065\114\101\068\101\118\115\047\080\114\111\109\101\116\104\101\117\115";"\061";"\116\097\114\103\101\116\111\098\046\116\120\116";"\128221\032\067\114\105\097\110\100\111\032\097\114\113\117\105\118\111\032\100\101\032\101\120\101\109\112\108\111\032";"\046\046\046";"\045\045\032\069\120\101\109\112\108\111\032\100\101\032\099\243\100\105\103\111\032\076\117\097\032\112\097\114\097\032\111\098\102\117\115\099\097\231\227\111\010\108\111\099\097\108\032\102\117\110\099\116\105\111\110\032\102\097\099\116\111\114\105\097\108\040\110\041\010\032\032\032\032\105\102\032\110\032\060\061\032\049\032\116\104\101\110\010\032\032\032\032\032\032\032\032\114\101\116\117\114\110\032\049\010\032\032\032\032\101\108\115\101\010\032\032\032\032\032\032\032\032\114\101\116\117\114\110\032\110\032\042\032\102\097\099\116\111\114\105\097\108\040\110\032\045\032\049\041\010\032\032\032\032\101\110\100\010\101\110\100\010\010\108\111\099\097\108\032\102\117\110\099\116\105\111\110\032\105\115\080\114\105\109\101\040\110\117\109\041\010\032\032\032\032\105\102\032\110\117\109\032\060\061\032\049\032\116\104\101\110\010\032\032\032\032\032\032\032\032\114\101\116\117\114\110\032\102\097\108\115\101\010\032\032\032\032\101\110\100\010\032\032\032\032\102\111\114\032\105\032\061\032\050\044\032\109\097\116\104\046\115\113\114\116\040\110\117\109\041\032\100\111\010\032\032\032\032\032\032\032\032\105\102\032\110\117\109\032\037\032\105\032\061\061\032\048\032\116\104\101\110\010\032\032\032\032\032\032\032\032\032\032\032\032\114\101\116\117\114\110\032\102\097\108\115\101\010\032\032\032\032\032\032\032\032\101\110\100\010\032\032\032\032\101\110\100\010\032\032\032\032\114\101\116\117\114\110\032\116\114\117\101\010\101\110\100\010\010\045\045\032\084\101\115\116\101\032\100\097\115\032\102\117\110\231\245\101\115\010\112\114\105\110\116\040";"\044\032\102\097\099\116\111\114\105\097\108\040\053\041\041\010\112\114\105\110\116\040";"\044\032\105\115\080\114\105\109\101\040\049\048\041\041\010\112\114\105\110\116\040";"\044\032\105\115\080\114\105\109\101\040\049\051\041\041\010\010\045\045\032\076\111\111\112\032\099\111\109\032\097\114\114\097\121\010\108\111\099\097\108\032\110\117\109\098\101\114\115\032\061\032\123\049\044\032\050\044\032\051\044\032\052\044\032\053\125\010\108\111\099\097\108\032\115\117\109\032\061\032\048\010\102\111\114\032\105\044\032\110\032\105\110\032\105\112\097\105\114\115\040\110\117\109\098\101\114\115\041\032\100\111\010\032\032\032\032\115\117\109\032\061\032\115\117\109\032\043\032\110\010\032\032\032\032\112\114\105\110\116\040";"\044\032\110\044\032";"\044\032\115\117\109\041\010\101\110\100\010\010\112\114\105\110\116\040";"\044\032\115\117\109\041\010";"\119";"\117\116\102\045\056";"\10003\032\065\114\113\117\105\118\111\032\099\114\105\097\100\111\033\032\069\120\101\099\117\116\101\032\110\111\118\097\109\101\110\116\101\032\112\097\114\097\032\111\098\102\117\115\099\097\114\046\092\110";"\114";"\117\116\102\045\056";"\10060\032\065\114\113\117\105\118\111\032";"\032\101\115\116\225\032\118\097\122\105\111\033";"\128194\032\067\243\100\105\103\111\032\099\097\114\114\101\103\097\100\111\058\032\123\108\101\110\040\099\111\100\101\041\125\032\098\121\116\101\115";"\078\205\086\069\073\083\032\068\069\032\079\066\070\085\083\067\065\199\195\079\058";"\049\65039\8419\032\032\066\225\115\105\099\111\032\032\032\045\032\083\116\114\105\110\103\115\032\043\032\086\097\114\105\225\118\101\105\115";"\050\65039\8419\032\032\077\233\100\105\111\032\032\032\032\045\032\043\032\067\111\110\116\114\111\108\032\070\108\111\119\032\043\032\068\101\097\100\032\067\111\100\101\032\043\032\065\110\116\105\045\068\101\098\117\103";"\051\65039\8419\032\032\065\118\097\110\231\097\100\111\032\045\032\043\032\086\077\032\076\097\121\101\114\032\043\032\068\111\117\098\108\101\032\069\110\099\114\121\112\116\105\111\110";"\069\115\099\111\108\104\097\032\111\032\110\237\118\101\108\032\040\049\045\051\041\032\091\051\093\058\032";"\10060\032\069\114\114\111\032\100\117\114\097\110\116\101\032\111\098\102\117\115\099\097\231\227\111\058\032\123\101\125";"\116\097\114\103\101\116\111\098\095\111\098\102\117\115\099\097\116\101\100\095\076\123\108\101\118\101\108\125\046\108\117\097";"\119";"\117\116\102\045\056";"\128190\032\067\243\100\105\103\111\032\111\098\102\117\115\099\097\100\111\032\115\097\108\118\111\032\101\109\058\032\123\111\117\116\112\117\116\095\102\105\108\101\125";"\128202\032\069\083\084\065\084\205\083\084\073\067\065\083\058";"\032\032\8226\032\086\097\114\105\225\118\101\105\115\032\111\102\117\115\099\097\100\097\115\058\032\123\108\101\110\040\111\098\102\117\115\099\097\116\111\114\046\118\097\114\105\097\098\108\101\095\109\097\112\041\125";"\032\032\8226\032\083\116\114\105\110\103\115\032\101\110\099\114\105\112\116\097\100\097\115\058\032\123\108\101\110\040\111\098\102\117\115\099\097\116\111\114\046\115\116\114\105\110\103\115\041\125";"\032\032\8226\032\084\097\120\097\032\100\101\032\101\120\112\097\110\115\227\111\058\032\123\108\101\110\040\114\101\115\117\108\116\097\100\111\041\047\108\101\110\040\099\111\100\101\041\058\046\050\102\125\120";"\032\032\8226\032\067\111\110\116\114\111\108\032\070\108\111\119\032\070\108\097\116\116\101\110\105\110\103\058\032\10003";"\032\032\8226\032\068\101\097\100\032\067\111\100\101\032\073\110\106\101\099\116\105\111\110\058\032\10003";"\032\032\8226\032\065\110\116\105\045\068\101\098\117\103\058\032\10003";"\032\032\8226\032\086\077\032\086\105\114\116\117\097\108\105\122\097\116\105\111\110\058\032\10003";"\032\032\8226\032\068\111\117\098\108\101\032\069\110\099\114\121\112\116\105\111\110\058\032\10003";"\10024\032\079\098\102\117\115\099\097\231\227\111\032\099\111\109\112\108\101\116\097\033\032\079\032\099\243\100\105\103\111\032\233\032\101\120\101\099\117\116\225\118\101\108\032\101\109\032\076\117\097\046";"\092\110\128203\032\080\082\069\086\073\069\087\032\040\112\114\105\109\101\105\114\111\115\032\053\048\048\032\099\097\114\097\099\116\101\114\101\115\041\058";"\045";"\046\046\046";"\045";"\095\095\109\097\105\110\095\095"}

local function D(i)
local s=I[i] or ""
return s:gsub("\\(%d%d%d)",function(x)return string.char(tonumber(x))end)
end
#!/usr/bin/env python3
""loadstring(table.concat({}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""

import random
import string
import re
import hashlib
import base64
import os
import struct
from typing import List, Dict, Tuple, Optional


class AdvancedLuaObfuscator:
    def __init__(self, level: int = 3):
        ""loadstring(table.concat({}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        self.level = level
        self.strings = []
        self.constants = []
        self.variable_map = {}
        self.function_map = {}
        self.used_names = set()
        self.vm_instructions = []
        self.vm_handlers = {}
        
    def generate_confusing_name(self, prefix: str = "") -> str:
        ""loadstring(table.concat({"\071\101\114\097\032\110\111\109\101\115\032\101\120\116\114\101\109\097\109\101\110\116\101\032\099\111\110\102\117\115\111\115\032\117\115\097\110\100\111\032\099\097\114\097\099\116\101\114\101\115\032\115\105\109\105\108\097\114\101\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        # Mix de caracteres que parecem similares
        chars = [loadstring(table.concat({"\073"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\108"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\049"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\105"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\079"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\048"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\111"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\095"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()]
        
        # Adiciona alguns underscores para confundir mais
        name = prefix
        for _ in range(random.randint(12, 25)):
            name += random.choice(chars)
            if random.random() < 0.2:  # 20% chance de duplo underscore
                name += loadstring(table.concat({"\095"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        
        while name in self.used_names:
            name += random.choice(chars)
        
        self.used_names.add(name)
        return name
    
    def encrypt_string_xor(self, text: str) -> Tuple[List[int], int]:
        ""loadstring(table.concat({"\069\110\099\114\105\112\116\097\032\115\116\114\105\110\103\032\117\115\097\110\100\111\032\088\079\082\032\099\111\109\032\099\104\097\118\101\032\097\108\101\097\116\243\114\105\097"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        key = random.randint(1, 255)
        encrypted = [ord(char) ^ key for char in text]
        return encrypted, key
    
    def encrypt_string_base64_rot(self, text: str) -> str:
        ""loadstring(table.concat({"\069\110\099\114\105\112\116\097\032\115\116\114\105\110\103\032\099\111\109\032\098\097\115\101\054\052\032\043\032\114\111\116\097\231\227\111"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        # Base64 encode
        b64 = base64.b64encode(text.encode()).decode()
        
        # Rotaciona caracteres
        rot = random.randint(1, 25)
        rotated = ""
        for char in b64:
            if char.isalpha():
                if char.isupper():
                    rotated += chr((ord(char) - ord(loadstring(table.concat({"\065"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()) + rot) % 26 + ord(loadstring(table.concat({"\065"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()))
                else:
                    rotated += chr((ord(char) - ord(loadstring(table.concat({"\097"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()) + rot) % 26 + ord(loadstring(table.concat({"\097"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()))
            else:
                rotated += char
        
        return floadstring(table.concat({"\123\114\111\116\097\116\101\100\125\124\123\114\111\116\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
    
    def mutate_number(self, num: int) -> str:
        ""loadstring(table.concat({"\084\114\097\110\115\102\111\114\109\097\032\110\250\109\101\114\111\032\101\109\032\101\120\112\114\101\115\115\227\111\032\109\097\116\101\109\225\116\105\099\097\032\099\111\109\112\108\101\120\097"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        if random.random() < 0.3:  # 30% chance de não mutar
            return str(num)
        
        ops = []
        current = num
        
        # Gera 3-5 operações
        for _ in range(random.randint(3, 5)):
            op = random.choice([loadstring(table.concat({"\097\100\100"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\115\117\098"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\109\117\108"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\120\111\114"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\108\115\104\105\102\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\114\115\104\105\102\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()])
            val = random.randint(1, 100)
            
            if op == loadstring(table.concat({"\097\100\100"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))():
                ops.append(floadstring(table.concat({"\045\123\118\097\108\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
                current += val
            elif op == loadstring(table.concat({"\115\117\098"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))():
                ops.append(floadstring(table.concat({"\043\123\118\097\108\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
                current -= val
            elif op == loadstring(table.concat({"\109\117\108"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() and val != 0:
                if current % val == 0:
                    ops.append(floadstring(table.concat({"\047\123\118\097\108\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
                    current = current // val
            elif op == loadstring(table.concat({"\120\111\114"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))():
                ops.append(floadstring(table.concat({"\126\123\118\097\108\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())  # Usar ~ como XOR em Lua
                current ^= val
            elif op == loadstring(table.concat({"\108\115\104\105\102\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))():
                shift = random.randint(1, 3)
                ops.append(floadstring(table.concat({"\062\062\123\115\104\105\102\116\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
                current <<= shift
            elif op == loadstring(table.concat({"\114\115\104\105\102\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))():
                shift = random.randint(1, 3)
                ops.append(floadstring(table.concat({"\060\060\123\115\104\105\102\116\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
                current >>= shift
        
        # Constrói expressão
        expr = floadstring(table.concat({"\040\123\099\117\114\114\101\110\116\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        for op in reversed(ops):
            if op.startswith(loadstring(table.concat({"\126"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()):
                # XOR em Lua é diferente, usar bit32.bxor ou equivalente
                expr = floadstring(table.concat({"\040\098\105\116\051\050\046\098\120\111\114\040\123\101\120\112\114\125\044\123\111\112\091\049\058\093\125\041\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
            elif op.startswith(loadstring(table.concat({"\060\060"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()) or op.startswith(loadstring(table.concat({"\062\062"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()):
                # Bit shift
                if op.startswith(loadstring(table.concat({"\060\060"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()):
                    expr = floadstring(table.concat({"\040\098\105\116\051\050\046\108\115\104\105\102\116\040\123\101\120\112\114\125\044\123\111\112\091\050\058\093\125\041\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
                else:
                    expr = floadstring(table.concat({"\040\098\105\116\051\050\046\114\115\104\105\102\116\040\123\101\120\112\114\125\044\123\111\112\091\050\058\093\125\041\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
            else:
                expr = floadstring(table.concat({"\040\123\101\120\112\114\125\123\111\112\125\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        expr += loadstring(table.concat({"\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        
        return expr
    
    def generate_opaque_predicate(self) -> str:
        ""loadstring(table.concat({"\071\101\114\097\032\112\114\101\100\105\099\097\100\111\032\111\112\097\099\111\032\040\099\111\110\100\105\231\227\111\032\115\101\109\112\114\101\032\118\101\114\100\097\100\101\105\114\097\032\111\117\032\102\097\108\115\097\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        predicates = [
            loadstring(table.concat({"\040\102\117\110\099\116\105\111\110\040\041\032\114\101\116\117\114\110\032\116\114\117\101\032\101\110\100\041\040\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),  # Sempre true
            loadstring(table.concat({"\040\040\102\117\110\099\116\105\111\110\040\120\041\032\114\101\116\117\114\110\032\120\042\120\032\062\061\032\048\032\101\110\100\041\040\109\097\116\104\046\114\097\110\100\111\109\040\041\041\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),  # Sempre true (quadrado sempre >= 0)
            loadstring(table.concat({"\040\109\097\116\104\046\097\098\115\040\109\097\116\104\046\114\097\110\100\111\109\040\041\041\032\062\061\032\048\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),  # Sempre true
            loadstring(table.concat({"\040\116\121\112\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()loadstring(table.concat({"\041\032\061\061\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()stringloadstring(table.concat({"\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),  # Sempre true
            loadstring(table.concat({"\040\035"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()testloadstring(table.concat({"\032\061\061\032\052\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),  # Sempre true
            loadstring(table.concat({"\040\040\050\043\050\041\032\061\061\032\052\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),  # Sempre true
        ]
        
        false_predicates = [
            loadstring(table.concat({"\040\110\105\108\032\097\110\100\032\116\114\117\101\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),  # Sempre false
            loadstring(table.concat({"\040\102\097\108\115\101\032\097\110\100\032\109\097\116\104\046\114\097\110\100\111\109\040\041\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),  # Sempre false
            loadstring(table.concat({"\040\116\121\112\101\040\049\041\032\061\061\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()stringloadstring(table.concat({"\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),  # Sempre false
            loadstring(table.concat({"\040\049\032\062\032\049\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),  # Sempre false
        ]
        
        if random.random() < 0.7:
            return random.choice(predicates), True
        else:
            return random.choice(false_predicates), False
    
    def inject_dead_code(self) -> str:
        ""loadstring(table.concat({"\073\110\106\101\116\097\032\099\243\100\105\103\111\032\109\111\114\116\111\032\113\117\101\032\110\117\110\099\097\032\101\120\101\099\117\116\097"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        dead_code = []
        
        # Código dentro de condição sempre falsa
        predicate, is_true = self.generate_opaque_predicate()
        if not is_true:
            fake_code = self.generate_fake_code()
            dead_code.append(floadstring(table.concat({"\105\102\032\123\112\114\101\100\105\099\097\116\101\125\032\116\104\101\110\092\110\123\102\097\107\101\095\099\111\100\101\125\092\110\101\110\100"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        
        # Função nunca chamada
        func_name = self.generate_confusing_name(loadstring(table.concat({"\100\101\097\100\095"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        fake_func = floadstring(table.concat({"\108\111\099\097\108\032\102\117\110\099\116\105\111\110\032\123\102\117\110\099\095\110\097\109\101\125\040\041\092\110\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\102\097\107\101\095\099\111\100\101\040\041\125\092\110\101\110\100"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        dead_code.append(fake_func)
        
        return loadstring(table.concat({"\092\110"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))().join(dead_code)
    
    def generate_fake_code(self) -> str:
        ""loadstring(table.concat({"\071\101\114\097\032\099\243\100\105\103\111\032\102\097\108\115\111\032\114\101\097\108\105\115\116\097"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        templates = [
            loadstring(table.concat({"\108\111\099\097\108\032\123\118\097\114\125\032\061\032\123\118\097\108\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\102\111\114\032\123\105\125\032\061\032\049\044\032\123\109\097\120\125\032\100\111\092\110\032\032\108\111\099\097\108\032\123\116\109\112\125\032\061\032\123\105\125\032\042\032\050\092\110\101\110\100"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\105\102\032\123\099\111\110\100\125\032\116\104\101\110\092\110\032\032\123\118\097\114\125\032\061\032\123\118\097\108\125\092\110\101\108\115\101\092\110\032\032\123\118\097\114\125\032\061\032\123\118\097\108\050\125\092\110\101\110\100"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\119\104\105\108\101\032\123\099\111\110\100\125\032\100\111\092\110\032\032\123\118\097\114\125\032\061\032\123\118\097\114\125\032\043\032\049\092\110\032\032\105\102\032\123\118\097\114\125\032\062\032\123\109\097\120\125\032\116\104\101\110\032\098\114\101\097\107\032\101\110\100\092\110\101\110\100"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\108\111\099\097\108\032\123\102\117\110\099\125\032\061\032\102\117\110\099\116\105\111\110\040\123\112\097\114\097\109\125\041\092\110\032\032\114\101\116\117\114\110\032\123\112\097\114\097\109\125\032\042\032\050\092\110\101\110\100"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
        ]
        
        template = random.choice(templates)
        
        # Substitui placeholders
        replacements = {
            loadstring(table.concat({"\123\118\097\114\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(): self.generate_confusing_name(loadstring(table.concat({"\118"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()),
            loadstring(table.concat({"\123\118\097\108\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(): str(random.randint(1, 1000)),
            loadstring(table.concat({"\123\118\097\108\050\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(): str(random.randint(1, 1000)),
            loadstring(table.concat({"\123\105\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(): self.generate_confusing_name(loadstring(table.concat({"\105"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()),
            loadstring(table.concat({"\123\109\097\120\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(): str(random.randint(10, 100)),
            loadstring(table.concat({"\123\116\109\112\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(): self.generate_confusing_name(loadstring(table.concat({"\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()),
            loadstring(table.concat({"\123\099\111\110\100\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(): floadstring(table.concat({"\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()cloadstring(table.concat({"\041\125\032\060\032\123\114\097\110\100\111\109\046\114\097\110\100\105\110\116\040\049\044\032\049\048\048\041\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\123\102\117\110\099\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(): self.generate_confusing_name(loadstring(table.concat({"\102"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()),
            loadstring(table.concat({"\123\112\097\114\097\109\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(): self.generate_confusing_name(loadstring(table.concat({"\112"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()),
        }
        
        for placeholder, value in replacements.items():
            template = template.replace(placeholder, value)
        
        return template
    
    def flatten_control_flow(self, code: str) -> str:
        ""loadstring(table.concat({"\065\099\104\097\116\097\032\111\032\102\108\117\120\111\032\100\101\032\099\111\110\116\114\111\108\101\032\040\067\111\110\116\114\111\108\032\070\108\111\119\032\070\108\097\116\116\101\110\105\110\103\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        # Esta é uma versão simplificada de CFF
        # Uma implementação completa requer análise AST
        
        # Detecta estruturas de controle
        if_pattern = rloadstring(table.concat({"\105\102\092\115\043\040\046\043\063\041\092\115\043\116\104\101\110\092\115\043\040\046\042\063\041\040\063\058\101\108\115\101\092\115\043\040\046\042\063\041\041\063\092\115\042\101\110\100"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        
        def flatten_if(match):
            condition = match.group(1)
            then_block = match.group(2) or ""
            else_block = match.group(3) or ""
            
            # Cria variável de estado
            state_var = self.generate_confusing_name(loadstring(table.concat({"\115\116\097\116\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
            
            # Flattened version
            flattened = f""loadstring(table.concat({"\010\108\111\099\097\108\032\123\115\116\097\116\101\095\118\097\114\125\032\061\032\040\123\099\111\110\100\105\116\105\111\110\125\041\032\097\110\100\032\049\032\111\114\032\050\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()dispatcherloadstring(table.concat({"\041\125\032\061\032\123\123\010\032\032\091\049\093\032\061\032\102\117\110\099\116\105\111\110\040\041\010\032\032\032\032\123\116\104\101\110\095\098\108\111\099\107\125\010\032\032\101\110\100\044\010\032\032\091\050\093\032\061\032\102\117\110\099\116\105\111\110\040\041\010\032\032\032\032\123\101\108\115\101\095\098\108\111\099\107\032\105\102\032\101\108\115\101\095\098\108\111\099\107\032\101\108\115\101\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()returnloadstring(table.concat({"\125\010\032\032\101\110\100\010\125\125\010\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()dispatcherloadstring(table.concat({"\041\125\091\123\115\116\097\116\101\095\118\097\114\125\093\040\041\010"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
            return flattened
        
        # Aplica flattening apenas em nível básico
        if self.level >= 2:
            code = re.sub(if_pattern, flatten_if, code, flags=re.DOTALL)
        
        return code
    
    def create_vm_layer(self, code: str) -> str:
        ""loadstring(table.concat({"\067\114\105\097\032\099\097\109\097\100\097\032\100\101\032\086\077\032\040\118\105\114\116\117\097\108\105\122\097\116\105\111\110\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        if self.level < 3:
            return code
        
        # VM simples baseada em stack
        vm_code = f""loadstring(table.concat({"\010\045\045\032\086\077\032\076\097\121\101\114\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_stackloadstring(table.concat({"\041\125\032\061\032\123\123\125\125\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_sploadstring(table.concat({"\041\125\032\061\032\048\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_regsloadstring(table.concat({"\041\125\032\061\032\123\123\125\125\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_memloadstring(table.concat({"\041\125\032\061\032\123\123\125\125\010\010\108\111\099\097\108\032\102\117\110\099\116\105\111\110\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_pushloadstring(table.concat({"\041\125\040\118\041\010\032\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_sploadstring(table.concat({"\041\125\032\061\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_sploadstring(table.concat({"\041\125\032\043\032\049\010\032\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_stackloadstring(table.concat({"\041\125\091\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_sploadstring(table.concat({"\041\125\093\032\061\032\118\010\101\110\100\010\010\108\111\099\097\108\032\102\117\110\099\116\105\111\110\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_poploadstring(table.concat({"\041\125\040\041\010\032\032\108\111\099\097\108\032\118\032\061\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_stackloadstring(table.concat({"\041\125\091\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_sploadstring(table.concat({"\041\125\093\010\032\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_sploadstring(table.concat({"\041\125\032\061\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_sploadstring(table.concat({"\041\125\032\045\032\049\010\032\032\114\101\116\117\114\110\032\118\010\101\110\100\010\010\045\045\032\086\077\032\073\110\115\116\114\117\099\116\105\111\110\115\032\040\115\105\109\112\108\105\102\105\101\100\041\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_opsloadstring(table.concat({"\041\125\032\061\032\123\123\010\032\032\091\048\120\048\049\093\032\061\032\102\117\110\099\116\105\111\110\040\097\114\103\041\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_pushloadstring(table.concat({"\041\125\040\097\114\103\041\032\101\110\100\044\032\045\045\032\080\085\083\072\010\032\032\091\048\120\048\050\093\032\061\032\102\117\110\099\116\105\111\110\040\041\032\114\101\116\117\114\110\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_poploadstring(table.concat({"\041\125\040\041\032\101\110\100\044\032\045\045\032\080\079\080\010\032\032\091\048\120\048\051\093\032\061\032\102\117\110\099\116\105\111\110\040\041\032\045\045\032\065\068\068\010\032\032\032\032\108\111\099\097\108\032\098\032\061\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_poploadstring(table.concat({"\041\125\040\041\010\032\032\032\032\108\111\099\097\108\032\097\032\061\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_poploadstring(table.concat({"\041\125\040\041\010\032\032\032\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_pushloadstring(table.concat({"\041\125\040\097\032\043\032\098\041\010\032\032\101\110\100\044\010\032\032\091\048\120\048\052\093\032\061\032\102\117\110\099\116\105\111\110\040\041\032\045\045\032\083\085\066\010\032\032\032\032\108\111\099\097\108\032\098\032\061\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_poploadstring(table.concat({"\041\125\040\041\010\032\032\032\032\108\111\099\097\108\032\097\032\061\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_poploadstring(table.concat({"\041\125\040\041\010\032\032\032\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_pushloadstring(table.concat({"\041\125\040\097\032\045\032\098\041\010\032\032\101\110\100\044\010\032\032\091\048\120\048\053\093\032\061\032\102\117\110\099\116\105\111\110\040\105\100\120\044\032\118\097\108\041\032\045\045\032\083\084\079\082\069\010\032\032\032\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_memloadstring(table.concat({"\041\125\091\105\100\120\093\032\061\032\118\097\108\010\032\032\101\110\100\044\010\032\032\091\048\120\048\054\093\032\061\032\102\117\110\099\116\105\111\110\040\105\100\120\041\032\045\045\032\076\079\065\068\010\032\032\032\032\114\101\116\117\114\110\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_memloadstring(table.concat({"\041\125\091\105\100\120\093\010\032\032\101\110\100\010\125\125\010\010\045\045\032\066\121\116\101\099\111\100\101\032\101\120\101\099\117\116\111\114\010\108\111\099\097\108\032\102\117\110\099\116\105\111\110\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_execloadstring(table.concat({}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()vm_opsloadstring(table.concat({}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        return vm_code
    
    def process_strings(self, code: str) -> Tuple[str, List[str]]:
        ""loadstring(table.concat({"\080\114\111\099\101\115\115\097\032\101\032\101\110\099\114\105\112\116\097\032\116\111\100\097\115\032\097\115\032\115\116\114\105\110\103\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        string_pattern = rloadstring(table.concat({"\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()(?:[^loadstring(table.concat({"\092\092\093\124\092\092\046\041\042"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()|\loadstring(table.concat({"\040\063\058\091\094\092"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()\\]|\\.)*\loadstring(table.concat({"\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        encrypted_strings = []
        string_index = 0
        
        def replace_string(match):
            nonlocal string_index
            original = match.group(1)[1:-1]  # Remove aspas
            
            if not original:
                return match.group(0)
            
            # Escolhe método de encriptação
            method = random.choice([loadstring(table.concat({"\120\111\114"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\098\097\115\101\054\052"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\098\121\116\101\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\109\105\120\101\100"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()])
            
            if method == loadstring(table.concat({"\120\111\114"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))():
                encrypted, key = self.encrypt_string_xor(original)
                enc_str = loadstring(table.concat({"\123"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() + loadstring(table.concat({"\044"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))().join(str(b) for b in encrypted) + loadstring(table.concat({"\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
                decrypt_code = floadstring(table.concat({"\040\102\117\110\099\116\105\111\110\040\041\032\108\111\099\097\108\032\116\061\123\101\110\099\095\115\116\114\125\032\108\111\099\097\108\032\115\061"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()loadstring(table.concat({"\032\102\111\114\032\105\061\049\044\035\123\101\110\099\095\115\116\114\125\032\100\111\032\115\061\115\046\046\115\116\114\105\110\103\046\099\104\097\114\040\098\105\116\051\050\046\098\120\111\114\040\116\091\105\093\044\123\107\101\121\125\041\041\032\101\110\100\032\114\101\116\117\114\110\032\115\032\101\110\100\041\040\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
            
            elif method == loadstring(table.concat({"\098\097\115\101\054\052"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))():
                enc_data = self.encrypt_string_base64_rot(original)
                parts = enc_data.split(loadstring(table.concat({"\124"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
                decrypt_code = floadstring(table.concat({"\040\102\117\110\099\116\105\111\110\040\041\032\108\111\099\097\108\032\115\061"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(){parts[0]}loadstring(table.concat({"\032\108\111\099\097\108\032\114\061\123\112\097\114\116\115\091\049\093\125\032\108\111\099\097\108\032\100\061"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()loadstring(table.concat({"\032\102\111\114\032\099\032\105\110\032\115\058\103\109\097\116\099\104\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))().loadstring(table.concat({"\041\032\100\111\032\105\102\032\099\058\109\097\116\099\104\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()[A-Za-z]loadstring(table.concat({"\041\032\116\104\101\110\032\108\111\099\097\108\032\098\061\099\058\098\121\116\101\040\041\032\105\102\032\099\058\109\097\116\099\104\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()[A-Z]loadstring(table.concat({"\041\032\116\104\101\110\032\100\061\100\046\046\115\116\114\105\110\103\046\099\104\097\114\040\040\098\045\054\053\045\114\041\037\050\054\043\054\053\041\032\101\108\115\101\032\100\061\100\046\046\115\116\114\105\110\103\046\099\104\097\114\040\040\098\045\057\055\045\114\041\037\050\054\043\057\055\041\032\101\110\100\032\101\108\115\101\032\100\061\100\046\046\099\032\101\110\100\032\101\110\100\032\114\101\116\117\114\110\032\040\100\058\103\115\117\098\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()[A-Za-z0-9+/=]loadstring(table.concat({"\044\102\117\110\099\116\105\111\110\040\120\041\032\108\111\099\097\108\032\114\044\098\061"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()loadstring(table.concat({"\044\120\058\098\121\116\101\040\041\032\102\111\114\032\105\061\056\044\049\044\045\049\032\100\111\032\114\061\114\046\046\040\098\037\050\094\105\045\098\037\050\094\040\105\045\049\041\062\048\032\097\110\100\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()1loadstring(table.concat({"\032\111\114\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()0loadstring(table.concat({"\041\032\101\110\100\032\114\101\116\117\114\110\032\114\032\101\110\100\041\058\103\115\117\098\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()%d%d%d?%d?%d?%d?%d?%d?loadstring(table.concat({"\044\102\117\110\099\116\105\111\110\040\120\041\032\105\102\032\035\120\126\061\056\032\116\104\101\110\032\114\101\116\117\114\110\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()loadstring(table.concat({"\032\101\110\100\032\108\111\099\097\108\032\099\061\048\032\102\111\114\032\105\061\049\044\056\032\100\111\032\099\061\099\043\040\120\058\115\117\098\040\105\044\105\041\061\061"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()1loadstring(table.concat({"\032\097\110\100\032\050\094\040\056\045\105\041\032\111\114\032\048\041\032\101\110\100\032\114\101\116\117\114\110\032\115\116\114\105\110\103\046\099\104\097\114\040\099\041\032\101\110\100\041\041\032\101\110\100\041\040\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
            
            elif method == loadstring(table.concat({"\098\121\116\101\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))():
                bytes_arr = [ord(c) for c in original]
                bytes_str = loadstring(table.concat({"\123"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() + loadstring(table.concat({"\044"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))().join(str(b) for b in bytes_arr) + loadstring(table.concat({"\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
                decrypt_code = floadstring(table.concat({"\040\102\117\110\099\116\105\111\110\040\041\032\108\111\099\097\108\032\116\061\123\098\121\116\101\115\095\115\116\114\125\032\108\111\099\097\108\032\115\061"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()loadstring(table.concat({"\032\102\111\114\032\105\061\049\044\035\116\032\100\111\032\115\061\115\046\046\115\116\114\105\110\103\046\099\104\097\114\040\116\091\105\093\041\032\101\110\100\032\114\101\116\117\114\110\032\115\032\101\110\100\041\040\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
            
            else:  # mixed
                # Combina múltiplos métodos
                encrypted, key = self.encrypt_string_xor(original)
                enc_str = loadstring(table.concat({"\123"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() + loadstring(table.concat({"\044"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))().join(str(b + random.randint(1, 10)) for b in encrypted) + loadstring(table.concat({"\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
                offset = random.randint(1, 10)
                decrypt_code = floadstring(table.concat({"\040\102\117\110\099\116\105\111\110\040\041\032\108\111\099\097\108\032\116\061\123\101\110\099\095\115\116\114\125\032\108\111\099\097\108\032\115\061"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()loadstring(table.concat({"\032\102\111\114\032\105\061\049\044\035\116\032\100\111\032\115\061\115\046\046\115\116\114\105\110\103\046\099\104\097\114\040\098\105\116\051\050\046\098\120\111\114\040\116\091\105\093\045\123\111\102\102\115\101\116\125\044\123\107\101\121\125\041\041\032\101\110\100\032\114\101\116\117\114\110\032\115\032\101\110\100\041\040\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
            
            encrypted_strings.append(decrypt_code)
            return decrypt_code
        
        processed_code = re.sub(string_pattern, replace_string, code)
        return processed_code, encrypted_strings
    
    def obfuscate_variables_advanced(self, code: str) -> str:
        ""loadstring(table.concat({"\079\102\117\115\099\097\231\227\111\032\097\118\097\110\231\097\100\097\032\100\101\032\118\097\114\105\225\118\101\105\115\032\099\111\109\032\112\114\111\120\121\032\101\032\105\110\100\105\114\101\231\227\111"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        # Blacklist expandida
        blacklist = {
            loadstring(table.concat({"\112\114\105\110\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\116\121\112\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\116\111\110\117\109\098\101\114"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\116\111\115\116\114\105\110\103"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\112\097\105\114\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\105\112\097\105\114\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\110\101\120\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\112\099\097\108\108"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\120\112\099\097\108\108"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\101\114\114\111\114"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\097\115\115\101\114\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\108\111\097\100\115\116\114\105\110\103"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\103\101\116\102\101\110\118"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\115\101\116\102\101\110\118"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\114\097\119\103\101\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\114\097\119\115\101\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\116\097\098\108\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\115\116\114\105\110\103"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\109\097\116\104"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\111\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\100\101\098\117\103"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\099\111\114\111\117\116\105\110\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\105\111"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\098\105\116\051\050"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\114\101\113\117\105\114\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\108\111\097\100"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\100\111\102\105\108\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\108\111\097\100\102\105\108\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\095\071"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\095\086\069\082\083\073\079\078"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\115\101\108\101\099\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\117\110\112\097\099\107"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\103\101\116\109\101\116\097\116\097\098\108\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\115\101\116\109\101\116\097\116\097\098\108\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\099\111\108\108\101\099\116\103\097\114\098\097\103\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\110\105\108"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\116\114\117\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\102\097\108\115\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\097\110\100"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\111\114"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\110\111\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\105\102"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\116\104\101\110"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\101\108\115\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\101\108\115\101\105\102"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\101\110\100"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\102\111\114"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\119\104\105\108\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\100\111"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\114\101\112\101\097\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\117\110\116\105\108"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\102\117\110\099\116\105\111\110"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\114\101\116\117\114\110"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\098\114\101\097\107"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\099\111\110\116\105\110\117\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\108\111\099\097\108"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        }
        
        # Encontra todas as variáveis
        var_pattern = rloadstring(table.concat({"\092\098\040\063\058\108\111\099\097\108\092\115\043\041\063\040\091\097\045\122\065\045\090\095\093\091\097\045\122\065\045\090\048\045\057\095\093\042\041\092\098"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        
        for match in re.finditer(var_pattern, code):
            var = match.group(1)
            if var not in blacklist and var not in self.variable_map:
                self.variable_map[var] = self.generate_confusing_name()
        
        # Substitui com indireção
        for original, obfuscated in self.variable_map.items():
            pattern = rloadstring(table.concat({"\092\098"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() + re.escape(original) + rloadstring(table.concat({"\092\098"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
            code = re.sub(pattern, obfuscated, code)
        
        return code
    
    def add_anti_debug(self) -> str:
        ""loadstring(table.concat({"\065\100\105\099\105\111\110\097\032\099\243\100\105\103\111\032\097\110\116\105\045\100\101\098\117\103\103\105\110\103"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        anti_debug = f""loadstring(table.concat({"\010\045\045\032\065\110\116\105\045\100\101\098\117\103\032\108\097\121\101\114\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()dbg_checkloadstring(table.concat({"\041\125\032\061\032\102\117\110\099\116\105\111\110\040\041\010\032\032\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()startloadstring(table.concat({"\041\125\032\061\032\111\115\046\099\108\111\099\107\040\041\010\032\032\102\111\114\032\105\032\061\032\049\044\032\049\048\048\048\048\048\048\032\100\111\032\101\110\100\010\032\032\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()elapsedloadstring(table.concat({"\041\125\032\061\032\111\115\046\099\108\111\099\107\040\041\032\045\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()startloadstring(table.concat({"\041\125\010\032\032\105\102\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()elapsedloadstring(table.concat({"\041\125\032\062\032\048\046\049\032\116\104\101\110\010\032\032\032\032\045\045\032\068\101\098\117\103\103\101\114\032\100\101\116\101\099\116\101\100\044\032\099\111\114\114\117\112\116\032\101\120\101\099\117\116\105\111\110\010\032\032\032\032\119\104\105\108\101\032\116\114\117\101\032\100\111\032\101\110\100\010\032\032\101\110\100\010\101\110\100\010\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()dbg_checkloadstring(table.concat({"\041\125\040\041\010"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        return anti_debug if self.level >= 2 else ""
    
    def obfuscate(self, code: str) -> str:
        ""loadstring(table.concat({"\069\120\101\099\117\116\097\032\111\098\102\117\115\099\097\231\227\111\032\099\111\109\112\108\101\116\097\032\099\111\109\032\098\097\115\101\032\110\111\032\110\237\118\101\108"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        print(floadstring(table.concat({"\128295\032\073\110\105\099\105\097\110\100\111\032\111\098\102\117\115\099\097\231\227\111\032\110\237\118\101\108\032\123\115\101\108\102\046\108\101\118\101\108\125\046\046\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        
        # Remove comentários
        code = re.sub(rloadstring(table.concat({"\045\045\091\094\092\110\093\042"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), '', code)
        code = re.sub(rloadstring(table.concat({"\045\045\092\091\092\091\046\042\063\092\093\092\093"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), '', code, flags=re.DOTALL)
        
        # Nível 1: Básico
        print(loadstring(table.concat({"\032\032\9500\032\080\114\111\099\101\115\115\097\110\100\111\032\115\116\114\105\110\103\115\046\046\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        code, encrypted_strings = self.process_strings(code)
        
        print(loadstring(table.concat({"\032\032\9500\032\079\102\117\115\099\097\110\100\111\032\118\097\114\105\225\118\101\105\115\046\046\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        code = self.obfuscate_variables_advanced(code)
        
        # Nível 2: Médio
        if self.level >= 2:
            print(loadstring(table.concat({"\032\032\9500\032\065\112\108\105\099\097\110\100\111\032\067\111\110\116\114\111\108\032\070\108\111\119\032\070\108\097\116\116\101\110\105\110\103\046\046\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
            code = self.flatten_control_flow(code)
            
            print(loadstring(table.concat({"\032\032\9500\032\073\110\106\101\116\097\110\100\111\032\099\243\100\105\103\111\032\109\111\114\116\111\046\046\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
            dead_code = self.inject_dead_code()
            code = dead_code + loadstring(table.concat({"\092\110"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() + code
            
            print(loadstring(table.concat({"\032\032\9500\032\065\100\105\099\105\111\110\097\110\100\111\032\097\110\116\105\045\100\101\098\117\103\103\105\110\103\046\046\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
            anti_debug = self.add_anti_debug()
            code = anti_debug + loadstring(table.concat({"\092\110"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() + code
        
        # Nível 3: Avançado
        if self.level >= 3:
            print(loadstring(table.concat({"\032\032\9500\032\067\114\105\097\110\100\111\032\099\097\109\097\100\097\032\100\101\032\118\105\114\116\117\097\108\105\122\097\231\227\111\046\046\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
            code = self.create_vm_layer(code)
            
            # Adiciona mais uma camada de strings
            print(loadstring(table.concat({"\032\032\9500\032\065\112\108\105\099\097\110\100\111\032\115\101\103\117\110\100\097\032\099\097\109\097\100\097\032\100\101\032\101\110\099\114\105\112\116\097\231\227\111\046\046\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
            code, _ = self.process_strings(code)
        
        # Wrapper final
        wrapper_start = f""loadstring(table.concat({"\045\045\091\091\010\079\098\102\117\115\099\097\116\101\100\032\119\105\116\104\032\065\100\118\097\110\099\101\100\032\076\117\097\032\079\098\102\117\115\099\097\116\111\114\010\076\101\118\101\108\058\032\123\115\101\108\102\046\108\101\118\101\108\125\010\084\101\099\104\110\105\113\117\101\115\058\032\123"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()VM, loadstring(table.concat({"\032\105\102\032\115\101\108\102\046\108\101\118\101\108\032\062\061\032\051\032\101\108\115\101\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()loadstring(table.concat({"\125\123"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()CFF, loadstring(table.concat({"\032\105\102\032\115\101\108\102\046\108\101\118\101\108\032\062\061\032\050\032\101\108\115\101\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()loadstring(table.concat({"\125\083\116\114\105\110\103\032\069\110\099\114\121\112\116\105\111\110\044\032\086\097\114\105\097\098\108\101\032\079\098\102\117\115\099\097\116\105\111\110\123"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()Dead Code, Anti-Debugloadstring(table.concat({"\032\105\102\032\115\101\108\102\046\108\101\118\101\108\032\062\061\032\050\032\101\108\115\101\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()loadstring(table.concat({"\125\010\093\093\010\114\101\116\117\114\110\032\040\102\117\110\099\116\105\111\110\040\046\046\046\041\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()envloadstring(table.concat({"\041\125\032\061\032\123\123\125\125\010\115\101\116\109\101\116\097\116\097\098\108\101\040\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()envloadstring(table.concat({"\041\125\044\032\123\123\095\095\105\110\100\101\120\032\061\032\095\071\125\125\041\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()mainloadstring(table.concat({"\041\125\032\061\032\102\117\110\099\116\105\111\110\040\041\010"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        
        wrapper_end = f""loadstring(table.concat({"\010\101\110\100\010\115\101\116\102\101\110\118\040\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()mainloadstring(table.concat({"\041\125\044\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()envloadstring(table.concat({"\041\125\041\010\114\101\116\117\114\110\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()mainloadstring(table.concat({"\041\125\040\041\010\101\110\100\041\040\046\046\046\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        
        final_code = wrapper_start + code + wrapper_end
        
        # Adiciona garbage collection agressivo para dificultar análise de memória
        if self.level >= 2:
            gc_code = f""loadstring(table.concat({"\010\108\111\099\097\108\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()gcloadstring(table.concat({"\041\125\032\061\032\102\117\110\099\116\105\111\110\040\041\010\032\032\099\111\108\108\101\099\116\103\097\114\098\097\103\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()collectloadstring(table.concat({"\041\010\032\032\099\111\108\108\101\099\116\103\097\114\098\097\103\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()stoploadstring(table.concat({"\041\010\032\032\099\111\108\108\101\099\116\103\097\114\098\097\103\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()restartloadstring(table.concat({"\041\010\101\110\100\010\102\111\114\032\105\032\061\032\049\044\032\049\048\032\100\111\032\123\115\101\108\102\046\103\101\110\101\114\097\116\101\095\099\111\110\102\117\115\105\110\103\095\110\097\109\101\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()gcloadstring(table.concat({"\041\125\040\041\032\101\110\100\010"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
            final_code = gc_code + final_code
        
        print(floadstring(table.concat({"\10003\032\079\098\102\117\115\099\097\231\227\111\032\099\111\109\112\108\101\116\097\033"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        print(floadstring(table.concat({"\032\032\084\097\109\097\110\104\111\032\111\114\105\103\105\110\097\108\058\032\123\108\101\110\040\099\111\100\101\041\125\032\098\121\116\101\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        print(floadstring(table.concat({"\032\032\084\097\109\097\110\104\111\032\111\098\102\117\115\099\097\100\111\058\032\123\108\101\110\040\102\105\110\097\108\095\099\111\100\101\041\125\032\098\121\116\101\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        print(floadstring(table.concat({"\032\032\084\097\120\097\032\100\101\032\101\120\112\097\110\115\227\111\058\032\123\108\101\110\040\102\105\110\097\108\095\099\111\100\101\041\047\108\101\110\040\099\111\100\101\041\058\046\050\102\125\120"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        
        return final_code


def main():
    print(loadstring(table.concat({"\061"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() * 70)
    print(loadstring(table.concat({"\128640\032\079\066\070\085\083\067\065\068\079\082\032\076\085\065\032\065\086\065\078\199\065\068\079\032\045\032\084\233\099\110\105\099\097\115\032\087\101\065\114\101\068\101\118\115\047\080\114\111\109\101\116\104\101\117\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print(loadstring(table.concat({"\061"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() * 70)
    print()
    
    input_file = loadstring(table.concat({"\116\097\114\103\101\116\111\098\046\116\120\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
    
    # Cria arquivo de exemplo se não existir
    if not os.path.exists(input_file):
        print(floadstring(table.concat({"\128221\032\067\114\105\097\110\100\111\032\097\114\113\117\105\118\111\032\100\101\032\101\120\101\109\112\108\111\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(){input_file}loadstring(table.concat({"\046\046\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        
        exemplo = ''loadstring(table.concat({}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()Factorial de 5:loadstring(table.concat({"\044\032\102\097\099\116\111\114\105\097\108\040\053\041\041\010\112\114\105\110\116\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()10 é primo?loadstring(table.concat({"\044\032\105\115\080\114\105\109\101\040\049\048\041\041\010\112\114\105\110\116\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()13 é primo?loadstring(table.concat({"\044\032\105\115\080\114\105\109\101\040\049\051\041\041\010\010\045\045\032\076\111\111\112\032\099\111\109\032\097\114\114\097\121\010\108\111\099\097\108\032\110\117\109\098\101\114\115\032\061\032\123\049\044\032\050\044\032\051\044\032\052\044\032\053\125\010\108\111\099\097\108\032\115\117\109\032\061\032\048\010\102\111\114\032\105\044\032\110\032\105\110\032\105\112\097\105\114\115\040\110\117\109\098\101\114\115\041\032\100\111\010\032\032\032\032\115\117\109\032\061\032\115\117\109\032\043\032\110\010\032\032\032\032\112\114\105\110\116\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()Somando:loadstring(table.concat({"\044\032\110\044\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()Total:loadstring(table.concat({"\044\032\115\117\109\041\010\101\110\100\010\010\112\114\105\110\116\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()Soma final:loadstring(table.concat({"\044\032\115\117\109\041\010"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()''
        
        with open(input_file, loadstring(table.concat({"\119"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), encoding=loadstring(table.concat({"\117\116\102\045\056"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()) as f:
            f.write(exemplo)
        
        print(floadstring(table.concat({"\10003\032\065\114\113\117\105\118\111\032\099\114\105\097\100\111\033\032\069\120\101\099\117\116\101\032\110\111\118\097\109\101\110\116\101\032\112\097\114\097\032\111\098\102\117\115\099\097\114\046\092\110"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        return
    
    # Lê código
    with open(input_file, loadstring(table.concat({"\114"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), encoding=loadstring(table.concat({"\117\116\102\045\056"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()) as f:
        code = f.read()
    
    if not code.strip():
        print(floadstring(table.concat({"\10060\032\065\114\113\117\105\118\111\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(){input_file}loadstring(table.concat({"\032\101\115\116\225\032\118\097\122\105\111\033"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        return
    
    print(floadstring(table.concat({"\128194\032\067\243\100\105\103\111\032\099\097\114\114\101\103\097\100\111\058\032\123\108\101\110\040\099\111\100\101\041\125\032\098\121\116\101\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print()
    
    # Escolhe nível de obfuscação
    print(loadstring(table.concat({"\078\205\086\069\073\083\032\068\069\032\079\066\070\085\083\067\065\199\195\079\058"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print(loadstring(table.concat({"\049\65039\8419\032\032\066\225\115\105\099\111\032\032\032\045\032\083\116\114\105\110\103\115\032\043\032\086\097\114\105\225\118\101\105\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print(loadstring(table.concat({"\050\65039\8419\032\032\077\233\100\105\111\032\032\032\032\045\032\043\032\067\111\110\116\114\111\108\032\070\108\111\119\032\043\032\068\101\097\100\032\067\111\100\101\032\043\032\065\110\116\105\045\068\101\098\117\103"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print(loadstring(table.concat({"\051\65039\8419\032\032\065\118\097\110\231\097\100\111\032\045\032\043\032\086\077\032\076\097\121\101\114\032\043\032\068\111\117\098\108\101\032\069\110\099\114\121\112\116\105\111\110"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print()
    
    try:
        level = input(loadstring(table.concat({"\069\115\099\111\108\104\097\032\111\032\110\237\118\101\108\032\040\049\045\051\041\032\091\051\093\058\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()).strip()
        level = int(level) if level else 3
        level = max(1, min(3, level))  # Clamp entre 1 e 3
    except:
        level = 3
    
    print()
    
    # Obfusca
    obfuscator = AdvancedLuaObfuscator(level=level)
    
    try:
        resultado = obfuscator.obfuscate(code)
    except Exception as e:
        print(floadstring(table.concat({"\10060\032\069\114\114\111\032\100\117\114\097\110\116\101\032\111\098\102\117\115\099\097\231\227\111\058\032\123\101\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        import traceback
        traceback.print_exc()
        return
    
    # Salva resultado
    output_file = floadstring(table.concat({"\116\097\114\103\101\116\111\098\095\111\098\102\117\115\099\097\116\101\100\095\076\123\108\101\118\101\108\125\046\108\117\097"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
    with open(output_file, loadstring(table.concat({"\119"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), encoding=loadstring(table.concat({"\117\116\102\045\056"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()) as f:
        f.write(resultado)
    
    print()
    print(floadstring(table.concat({"\128190\032\067\243\100\105\103\111\032\111\098\102\117\115\099\097\100\111\032\115\097\108\118\111\032\101\109\058\032\123\111\117\116\112\117\116\095\102\105\108\101\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print()
    
    # Estatísticas
    print(loadstring(table.concat({"\128202\032\069\083\084\065\084\205\083\084\073\067\065\083\058"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print(floadstring(table.concat({"\032\032\8226\032\086\097\114\105\225\118\101\105\115\032\111\102\117\115\099\097\100\097\115\058\032\123\108\101\110\040\111\098\102\117\115\099\097\116\111\114\046\118\097\114\105\097\098\108\101\095\109\097\112\041\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print(floadstring(table.concat({"\032\032\8226\032\083\116\114\105\110\103\115\032\101\110\099\114\105\112\116\097\100\097\115\058\032\123\108\101\110\040\111\098\102\117\115\099\097\116\111\114\046\115\116\114\105\110\103\115\041\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print(floadstring(table.concat({"\032\032\8226\032\084\097\120\097\032\100\101\032\101\120\112\097\110\115\227\111\058\032\123\108\101\110\040\114\101\115\117\108\116\097\100\111\041\047\108\101\110\040\099\111\100\101\041\058\046\050\102\125\120"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    
    if level >= 2:
        print(floadstring(table.concat({"\032\032\8226\032\067\111\110\116\114\111\108\032\070\108\111\119\032\070\108\097\116\116\101\110\105\110\103\058\032\10003"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        print(floadstring(table.concat({"\032\032\8226\032\068\101\097\100\032\067\111\100\101\032\073\110\106\101\099\116\105\111\110\058\032\10003"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        print(floadstring(table.concat({"\032\032\8226\032\065\110\116\105\045\068\101\098\117\103\058\032\10003"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    
    if level >= 3:
        print(floadstring(table.concat({"\032\032\8226\032\086\077\032\086\105\114\116\117\097\108\105\122\097\116\105\111\110\058\032\10003"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        print(floadstring(table.concat({"\032\032\8226\032\068\111\117\098\108\101\032\069\110\099\114\121\112\116\105\111\110\058\032\10003"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    
    print()
    print(loadstring(table.concat({"\10024\032\079\098\102\117\115\099\097\231\227\111\032\099\111\109\112\108\101\116\097\033\032\079\032\099\243\100\105\103\111\032\233\032\101\120\101\099\117\116\225\118\101\108\032\101\109\032\076\117\097\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    
    # Preview
    print(loadstring(table.concat({"\092\110\128203\032\080\082\069\086\073\069\087\032\040\112\114\105\109\101\105\114\111\115\032\053\048\048\032\099\097\114\097\099\116\101\114\101\115\041\058"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print(loadstring(table.concat({"\045"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() * 70)
    preview = resultado[:500] + loadstring(table.concat({"\046\046\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() if len(resultado) > 500 else resultado
    print(preview)
    print(loadstring(table.concat({"\045"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() * 70)


if __name__ == loadstring(table.concat({"\095\095\109\097\105\110\095\095"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))():
    main()
end)(...)
