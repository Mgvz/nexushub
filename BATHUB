
return(function(...)
local I={}

local function D(i)
local s=I[i] or ""
return s:gsub("\\(%d%d%d)",function(x)return string.char(tonumber(x))end)
end
#!/usr/bin/env python3
""loadstring(table.concat({"\010\079\098\102\117\115\099\097\100\111\114\032\076\117\097\032\070\117\110\099\105\111\110\097\108\032\045\032\086\101\114\115\227\111\032\067\111\114\114\105\103\105\100\097\010\071\101\114\097\032\099\243\100\105\103\111\032\076\117\097\032\118\225\108\105\100\111\032\101\032\101\120\101\099\117\116\225\118\101\108\010"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""

import random
import string
import re
import os


class LuaObfuscator:
    def __init__(self):
        self.used_names = set()
        self.variable_map = {}
        self.strings = []
        self.string_map = {}
        
    def generate_random_name(self, length=None):
        ""loadstring(table.concat({"\071\101\114\097\032\110\111\109\101\115\032\099\111\110\102\117\115\111\115\032\117\115\097\110\100\111\032\073\044\032\108\044\032\049\044\032\079\044\032\048"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        if length is None:
            length = random.randint(8, 15)
        
        confusing_chars = [loadstring(table.concat({"\073"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\108"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\049"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\079"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\048"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\111"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()]
        
        # Garantir que começa com uma letra válida
        name = random.choice([loadstring(table.concat({"\073"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\108"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\079"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\111"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()])
        name += ''.join(random.choice(confusing_chars) for _ in range(length - 1))
        
        while name in self.used_names:
            name += random.choice(confusing_chars)
        
        self.used_names.add(name)
        return name
    
    def string_to_escape_sequence(self, text):
        ""loadstring(table.concat({"\067\111\110\118\101\114\116\101\032\115\116\114\105\110\103\032\112\097\114\097\032\101\115\099\097\112\101\032\115\101\113\117\101\110\099\101\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        result = ""
        for char in text:
            byte_val = ord(char)
            result += floadstring(table.concat({"\092\092\123\098\121\116\101\095\118\097\108\058\048\051\100\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        return result
    
    def extract_strings(self, code):
        ""loadstring(table.concat({"\069\120\116\114\097\105\032\116\111\100\097\115\032\097\115\032\115\116\114\105\110\103\115\032\101\032\097\115\032\115\117\098\115\116\105\116\117\105\032\112\111\114\032\112\108\097\099\101\104\111\108\100\101\114\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        string_pattern = rloadstring(table.concat({"\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()([^loadstring(table.concat({"\092\092\093\124\092\092\046\041\042"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()|\loadstring(table.concat({"\040\091\094\092"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()\\]|\\.)*\loadstring(table.concat({"\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        self.strings = []
        self.string_map = {}
        
        def replace_string(match):
            original = match.group(0)
            # Extrair o conteúdo da string (sem as aspas)
            content = original[1:-1]
            
            # Criar versão escapada
            if content:
                escaped = self.string_to_escape_sequence(content)
                index = len(self.strings)
                self.strings.append(escaped)
                placeholder = floadstring(table.concat({"\095\095\083\084\082\095\123\105\110\100\101\120\125\095\095"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
                self.string_map[placeholder] = index
                return placeholder
            return original
        
        return re.sub(string_pattern, replace_string, code)
    
    def obfuscate_variables(self, code):
        ""loadstring(table.concat({"\079\102\117\115\099\097\032\110\111\109\101\115\032\100\101\032\118\097\114\105\225\118\101\105\115\032\108\111\099\097\105\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        # Blacklist de funções Lua nativas que não devem ser ofuscadas
        blacklist = {
            loadstring(table.concat({"\112\114\105\110\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\116\121\112\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\116\111\110\117\109\098\101\114"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\116\111\115\116\114\105\110\103"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\112\097\105\114\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\105\112\097\105\114\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\110\101\120\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\112\099\097\108\108"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\120\112\099\097\108\108"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\101\114\114\111\114"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\097\115\115\101\114\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\108\111\097\100\115\116\114\105\110\103"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\103\101\116\102\101\110\118"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\115\101\116\102\101\110\118"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\114\097\119\103\101\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\114\097\119\115\101\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\116\097\098\108\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\115\116\114\105\110\103"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\109\097\116\104"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\111\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\100\101\098\117\103"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\099\111\114\111\117\116\105\110\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\105\111"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\098\105\116\051\050"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\114\101\113\117\105\114\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\108\111\097\100"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\100\111\102\105\108\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\108\111\097\100\102\105\108\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\095\071"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\095\086\069\082\083\073\079\078"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\115\101\108\101\099\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(),
            loadstring(table.concat({"\117\110\112\097\099\107"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\103\101\116\109\101\116\097\116\097\098\108\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\115\101\116\109\101\116\097\116\097\098\108\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\099\111\108\108\101\099\116\103\097\114\098\097\103\101"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        }
        
        # Encontrar variáveis locais
        local_pattern = rloadstring(table.concat({"\092\098\108\111\099\097\108\092\115\043\040\091\097\045\122\065\045\090\095\093\091\097\045\122\065\045\090\048\045\057\095\093\042\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        function_pattern = rloadstring(table.concat({"\092\098\102\117\110\099\116\105\111\110\092\115\043\040\091\097\045\122\065\045\090\095\093\091\097\045\122\065\045\090\048\045\057\095\093\042\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        
        # Coletar todas as variáveis
        all_vars = set()
        for pattern in [local_pattern, function_pattern]:
            matches = re.findall(pattern, code)
            for var in matches:
                if var not in blacklist:
                    all_vars.add(var)
        
        # Criar mapeamento
        for var in all_vars:
            if var not in self.variable_map:
                self.variable_map[var] = self.generate_random_name()
        
        # Substituir variáveis
        for original, obfuscated in self.variable_map.items():
            # Use word boundaries para evitar substituições parciais
            pattern = rloadstring(table.concat({"\092\098"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() + re.escape(original) + rloadstring(table.concat({"\092\098"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
            code = re.sub(pattern, obfuscated, code)
        
        return code
    
    def create_final_code(self, code):
        ""loadstring(table.concat({"\067\114\105\097\032\111\032\099\243\100\105\103\111\032\102\105\110\097\108\032\099\111\109\032\100\101\099\111\100\105\102\105\099\097\231\227\111\032\100\101\032\115\116\114\105\110\103\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        if not self.strings:
            # Se não há strings, apenas retornar o código com wrapper
            return floadstring(table.concat({"\114\101\116\117\114\110\040\102\117\110\099\116\105\111\110\040\046\046\046\041\092\110\123\099\111\100\101\125\092\110\101\110\100\041\040\046\046\046\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        
        # Nome para o array de strings
        string_array_name = self.generate_random_name()
        
        # Nome para a função de decodificação
        decode_func_name = self.generate_random_name()
        
        # Criar array de strings
        result = floadstring(table.concat({"\108\111\099\097\108\032\123\115\116\114\105\110\103\095\097\114\114\097\121\095\110\097\109\101\125\061\123\123"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        for i, s in enumerate(self.strings):
            if i > 0:
                result += loadstring(table.concat({"\044"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
            result += f'"{s}"'
        result += loadstring(table.concat({"\125\092\110"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        
        # Criar função de decodificação
        result += f""loadstring(table.concat({"\108\111\099\097\108\032\102\117\110\099\116\105\111\110\032\123\100\101\099\111\100\101\095\102\117\110\099\095\110\097\109\101\125\040\105\041\010\108\111\099\097\108\032\115\061\123\115\116\114\105\110\103\095\097\114\114\097\121\095\110\097\109\101\125\091\105\093\010\105\102\032\110\111\116\032\115\032\116\104\101\110\032\114\101\116\117\114\110\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()loadstring(table.concat({"\032\101\110\100\010\114\101\116\117\114\110\032\040\115\058\103\115\117\098\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()\\\\(%d%d%d)loadstring(table.concat({"\044\102\117\110\099\116\105\111\110\040\120\041\114\101\116\117\114\110\032\115\116\114\105\110\103\046\099\104\097\114\040\116\111\110\117\109\098\101\114\040\120\041\041\101\110\100\041\041\010\101\110\100\010"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        
        # Substituir placeholders por chamadas de decodificação
        for placeholder, index in self.string_map.items():
            code = code.replace(placeholder, floadstring(table.concat({"\123\100\101\099\111\100\101\095\102\117\110\099\095\110\097\109\101\125\040\123\105\110\100\101\120\032\043\032\049\125\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        
        # Adicionar o código modificado
        result += code
        
        # Envolver tudo em uma função anônima
        return floadstring(table.concat({"\114\101\116\117\114\110\040\102\117\110\099\116\105\111\110\040\046\046\046\041\092\110\123\114\101\115\117\108\116\125\092\110\101\110\100\041\040\046\046\046\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
    
    def obfuscate(self, source_code):
        ""loadstring(table.concat({"\082\101\097\108\105\122\097\032\097\032\111\098\102\117\115\099\097\231\227\111\032\099\111\109\112\108\101\116\097"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        print(loadstring(table.concat({"\073\110\105\099\105\097\110\100\111\032\111\098\102\117\115\099\097\231\227\111\046\046\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        
        # Remover comentários
        code = self.remove_comments(source_code)
        
        # 1. Extrair strings
        code = self.extract_strings(code)
        
        # 2. Ofuscar variáveis
        code = self.obfuscate_variables(code)
        
        # 3. Criar código final com decodificação
        result = self.create_final_code(code)
        
        print(floadstring(table.concat({"\079\098\102\117\115\099\097\231\227\111\032\099\111\110\099\108\117\237\100\097\033"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        print(floadstring(table.concat({"\084\097\109\097\110\104\111\032\111\114\105\103\105\110\097\108\058\032\123\108\101\110\040\115\111\117\114\099\101\095\099\111\100\101\041\125\032\098\121\116\101\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        print(floadstring(table.concat({"\084\097\109\097\110\104\111\032\111\102\117\115\099\097\100\111\058\032\123\108\101\110\040\114\101\115\117\108\116\041\125\032\098\121\116\101\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        print(floadstring(table.concat({"\083\116\114\105\110\103\115\032\101\120\116\114\097\237\100\097\115\058\032\123\108\101\110\040\115\101\108\102\046\115\116\114\105\110\103\115\041\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        print(floadstring(table.concat({"\086\097\114\105\225\118\101\105\115\032\111\102\117\115\099\097\100\097\115\058\032\123\108\101\110\040\115\101\108\102\046\118\097\114\105\097\098\108\101\095\109\097\112\041\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        
        return result
    
    def remove_comments(self, code):
        ""loadstring(table.concat({"\082\101\109\111\118\101\032\099\111\109\101\110\116\225\114\105\111\115\032\100\111\032\099\243\100\105\103\111"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
        # Remover comentários de linha
        code = re.sub(rloadstring(table.concat({"\045\045\091\094\092\110\093\042"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), '', code)
        # Remover comentários de bloco
        code = re.sub(rloadstring(table.concat({"\045\045\092\091\092\091\046\042\063\092\093\092\093"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), '', code, flags=re.DOTALL)
        return code


class SimpleObfuscator:
    ""loadstring(table.concat({"\079\098\102\117\115\099\097\100\111\114\032\109\097\105\115\032\115\105\109\112\108\101\115\032\101\032\099\111\110\102\105\225\118\101\108"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
    
    def __init__(self):
        self.strings = []
        self.var_counter = 0
        
    def obfuscate(self, code):
        # Remover comentários
        code = re.sub(rloadstring(table.concat({"\045\045\091\094\092\110\093\042"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), '', code)
        code = re.sub(rloadstring(table.concat({"\045\045\092\091\092\091\046\042\063\092\093\092\093"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), '', code, flags=re.DOTALL)
        
        # Extrair strings
        string_pattern = rloadstring(table.concat({"\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()([^loadstring(table.concat({"\092\092\093\124\092\092\046\041\042"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()|\loadstring(table.concat({"\040\091\094\092"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()\\]|\\.)*\loadstring(table.concat({"\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
        
        def extract_string(match):
            content = match.group(0)[1:-1]  # Remove aspas
            if content:
                # Converter para bytes
                escaped = ""
                for char in content:
                    escaped += floadstring(table.concat({"\092\092\123\111\114\100\040\099\104\097\114\041\058\048\051\100\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
                
                index = len(self.strings)
                self.strings.append(escaped)
                return floadstring(table.concat({"\095\083\091\123\105\110\100\101\120\032\043\032\049\125\093"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
            return match.group(0)
        
        code = re.sub(string_pattern, extract_string, code)
        
        # Gerar código final
        if self.strings:
            result = loadstring(table.concat({"\108\111\099\097\108\032\095\083\061\123\125\092\110"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
            for i, s in enumerate(self.strings):
                result += floadstring(table.concat({"\095\083\091\123\105\043\049\125\093\061\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(){s}loadstring(table.concat({"\041\058\103\115\117\098\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()\\\\(%d%d%d)loadstring(table.concat({"\044\102\117\110\099\116\105\111\110\040\120\041\114\101\116\117\114\110\032\115\116\114\105\110\103\046\099\104\097\114\040\116\111\110\117\109\098\101\114\040\120\041\041\101\110\100\041\092\110"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
            result += code
        else:
            result = code
        
        # Envolver em função
        return floadstring(table.concat({"\114\101\116\117\114\110\040\102\117\110\099\116\105\111\110\040\046\046\046\041\092\110\123\114\101\115\117\108\116\125\092\110\101\110\100\041\040\046\046\046\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()


def test_obfuscated_code(obfuscated_code, test_file=loadstring(table.concat({"\116\101\115\116\095\111\098\102\117\115\099\097\116\101\100\046\108\117\097"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()):
    ""loadstring(table.concat({"\084\101\115\116\097\032\115\101\032\111\032\099\243\100\105\103\111\032\111\098\102\117\115\099\097\100\111\032\233\032\118\225\108\105\100\111"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()""
    # Salvar em arquivo temporário
    with open(test_file, loadstring(table.concat({"\119"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), encoding=loadstring(table.concat({"\117\116\102\045\056"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()) as f:
        f.write(obfuscated_code)
    
    # Tentar executar com lua
    import subprocess
    try:
        result = subprocess.run(
            [loadstring(table.concat({"\108\117\097"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), test_file],
            capture_output=True,
            text=True,
            timeout=5
        )
        
        if result.returncode == 0:
            print(loadstring(table.concat({"\10003\032\067\243\100\105\103\111\032\111\098\102\117\115\099\097\100\111\032\233\032\118\225\108\105\100\111\032\101\032\101\120\101\099\117\116\225\118\101\108\033"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
            if result.stdout:
                print(floadstring(table.concat({"\083\097\237\100\097\058\032\123\114\101\115\117\108\116\046\115\116\100\111\117\116\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
            return True
        else:
            print(loadstring(table.concat({"\10007\032\069\114\114\111\032\097\111\032\101\120\101\099\117\116\097\114\032\099\243\100\105\103\111\032\111\098\102\117\115\099\097\100\111\058"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
            print(result.stderr)
            return False
    except FileNotFoundError:
        print(loadstring(table.concat({"\9888\032\076\117\097\032\110\227\111\032\101\110\099\111\110\116\114\097\100\111\046\032\073\110\115\116\097\108\101\032\076\117\097\032\112\097\114\097\032\116\101\115\116\097\114\032\111\032\099\243\100\105\103\111\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        return None
    except subprocess.TimeoutExpired:
        print(loadstring(table.concat({"\10007\032\084\105\109\101\111\117\116\032\097\111\032\101\120\101\099\117\116\097\114\032\099\243\100\105\103\111"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        return False
    finally:
        # Limpar arquivo de teste
        if os.path.exists(test_file):
            os.remove(test_file)


def main():
    print(loadstring(table.concat({"\061"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() * 60)
    print(loadstring(table.concat({"\079\066\070\085\083\067\065\068\079\082\032\076\085\065\032\070\085\078\067\073\079\078\065\076\032\045\032\086\069\082\083\195\079\032\067\079\082\082\073\071\073\068\065"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print(loadstring(table.concat({"\061"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() * 60)
    print()
    
    input_file = loadstring(table.concat({"\116\097\114\103\101\116\111\098\046\116\120\116"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
    output_file = loadstring(table.concat({"\116\097\114\103\101\116\111\098\095\111\098\102\117\115\099\097\116\101\100\046\108\117\097"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()
    
    # Verificar se arquivo existe
    if not os.path.exists(input_file):
        print(floadstring(table.concat({"\065\114\113\117\105\118\111\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(){input_file}loadstring(table.concat({"\032\110\227\111\032\101\110\099\111\110\116\114\097\100\111\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        print(loadstring(table.concat({"\067\114\105\097\110\100\111\032\097\114\113\117\105\118\111\032\100\101\032\101\120\101\109\112\108\111\046\046\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        
        exemplo_lua = ''loadstring(table.concat({"\045\045\032\069\120\101\109\112\108\111\032\100\101\032\099\243\100\105\103\111\032\076\117\097\010\108\111\099\097\108\032\102\117\110\099\116\105\111\110\032\103\114\101\101\116\040\110\097\109\101\041\010\032\032\032\032\108\111\099\097\108\032\109\101\115\115\097\103\101\032\061\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()Hello, loadstring(table.concat({"\032\046\046\032\110\097\109\101\032\046\046\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()!loadstring(table.concat({}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()Sum: loadstring(table.concat({"\032\046\046\032\115\117\109\041\010\032\032\032\032\112\114\105\110\116\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()Product: loadstring(table.concat({"\032\046\046\032\112\114\111\100\117\099\116\041\010\032\032\032\032\114\101\116\117\114\110\032\115\117\109\044\032\112\114\111\100\117\099\116\010\101\110\100\010\010\045\045\032\084\101\115\116\101\032\100\097\115\032\102\117\110\231\245\101\115\010\108\111\099\097\108\032\103\114\101\101\116\105\110\103\032\061\032\103\114\101\101\116\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()Worldloadstring(table.concat({"\041\010\112\114\105\110\116\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()Returned: loadstring(table.concat({"\032\046\046\032\103\114\101\101\116\105\110\103\041\010\010\108\111\099\097\108\032\120\044\032\121\032\061\032\099\097\108\099\117\108\097\116\101\040\053\044\032\051\041\010\112\114\105\110\116\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()Results: loadstring(table.concat({"\032\046\046\032\120\032\046\046\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), loadstring(table.concat({"\032\046\046\032\121\041\010\010\045\045\032\076\111\111\112\032\099\111\109\032\116\097\098\101\108\097\010\108\111\099\097\108\032\110\117\109\098\101\114\115\032\061\032\123\049\048\044\032\050\048\044\032\051\048\044\032\052\048\044\032\053\048\125\010\102\111\114\032\105\044\032\110\117\109\032\105\110\032\105\112\097\105\114\115\040\110\117\109\098\101\114\115\041\032\100\111\010\032\032\032\032\112\114\105\110\116\040"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()Index loadstring(table.concat({"\032\046\046\032\105\032\046\046\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() = loadstring(table.concat({"\032\046\046\032\110\117\109\041\010\101\110\100\010"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()''
        
        with open(input_file, loadstring(table.concat({"\119"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), encoding=loadstring(table.concat({"\117\116\102\045\056"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()) as f:
            f.write(exemplo_lua)
        
        print(floadstring(table.concat({"\10003\032\065\114\113\117\105\118\111\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(){input_file}loadstring(table.concat({"\032\099\114\105\097\100\111\032\099\111\109\032\099\243\100\105\103\111\032\100\101\032\101\120\101\109\112\108\111\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        print(loadstring(table.concat({"\069\120\101\099\117\116\101\032\110\111\118\097\109\101\110\116\101\032\112\097\114\097\032\111\098\102\117\115\099\097\114\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        return
    
    # Ler código
    with open(input_file, loadstring(table.concat({"\114"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), encoding=loadstring(table.concat({"\117\116\102\045\056"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()) as f:
        code = f.read()
    
    if not code.strip():
        print(floadstring(table.concat({"\10007\032\065\114\113\117\105\118\111\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(){input_file}loadstring(table.concat({"\032\101\115\116\225\032\118\097\122\105\111\033"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        return
    
    print(floadstring(table.concat({"\10003\032\067\243\100\105\103\111\032\099\097\114\114\101\103\097\100\111\058\032\123\108\101\110\040\099\111\100\101\041\125\032\098\121\116\101\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print()
    
    # Escolher modo
    print(loadstring(table.concat({"\077\079\068\079\083\032\068\069\032\079\066\070\085\083\067\065\199\195\079\058"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print(loadstring(table.concat({"\049\032\045\032\083\105\109\112\108\101\115\032\040\109\097\105\115\032\099\111\110\102\105\225\118\101\108\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print(loadstring(table.concat({"\050\032\045\032\065\118\097\110\231\097\100\111\032\040\109\097\105\115\032\111\098\102\117\115\099\097\231\227\111\041"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print()
    
    try:
        modo = input(loadstring(table.concat({"\069\115\099\111\108\104\097\032\111\032\109\111\100\111\032\091\049\093\058\032"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()).strip()
        modo = int(modo) if modo else 1
    except:
        modo = 1
    
    print()
    
    if modo == 1:
        print(loadstring(table.concat({"\085\115\097\110\100\111\032\109\111\100\111\032\083\073\077\080\076\069\083\046\046\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        obfuscator = SimpleObfuscator()
    else:
        print(loadstring(table.concat({"\085\115\097\110\100\111\032\109\111\100\111\032\065\086\065\078\199\065\068\079\046\046\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        obfuscator = LuaObfuscator()
    
    # Obfuscar
    try:
        resultado = obfuscator.obfuscate(code)
    except Exception as e:
        print(floadstring(table.concat({"\10007\032\069\114\114\111\032\100\117\114\097\110\116\101\032\111\098\102\117\115\099\097\231\227\111\058\032\123\101\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
        return
    
    # Salvar resultado
    with open(output_file, loadstring(table.concat({"\119"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))(), encoding=loadstring(table.concat({"\117\116\102\045\056"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))()) as f:
        f.write(resultado)
    
    print(floadstring(table.concat({"\10003\032\067\243\100\105\103\111\032\111\098\102\117\115\099\097\100\111\032\115\097\108\118\111\032\101\109\058\032\123\111\117\116\112\117\116\095\102\105\108\101\125"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print(floadstring(table.concat({"\032\032\084\097\109\097\110\104\111\058\032\123\108\101\110\040\114\101\115\117\108\116\097\100\111\041\125\032\098\121\116\101\115"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print()
    
    # Testar código (opcional)
    print(loadstring(table.concat({"\084\101\115\116\097\110\100\111\032\099\243\100\105\103\111\032\111\098\102\117\115\099\097\100\111\046\046\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    test_obfuscated_code(resultado)
    
    # Mostrar preview
    print(loadstring(table.concat({"\092\110\080\082\069\086\073\069\087\032\100\111\032\099\243\100\105\103\111\032\111\098\102\117\115\099\097\100\111\032\040\112\114\105\109\101\105\114\111\115\032\053\048\048\032\099\097\114\097\099\116\101\114\101\115\041\058"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))())
    print(loadstring(table.concat({"\045"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() * 60)
    print(resultado[:500] + loadstring(table.concat({"\046\046\046"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() if len(resultado) > 500 else resultado)
    print(loadstring(table.concat({"\045"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))() * 60)


if __name__ == loadstring(table.concat({"\095\095\109\097\105\110\095\095"}:gsub('\\(%d%d%d)', function(x) return string.char(tonumber(x)) end):split('')))():
    main()
end)(...)
